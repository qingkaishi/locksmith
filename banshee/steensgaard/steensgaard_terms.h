/*

DO NOT edit this file

*/
#ifndef STEENSGAARD_TERMS_H
#define STEENSGAARD_TERMS_H
#include "list.h"
#include <stdio.h>
#include "bool.h"
#include "linkage.h"
#include "hash.h"

EXTERN_C_BEGIN typedef struct alabel_t_ *alabel_t;
typedef struct L_ *L;
typedef struct argT_ *argT;
typedef struct argT_field_ *argT_field;
typedef struct T_ *T;

extern int flag_hash_cons;
extern bool flag_merge_projections;
extern bool flag_eliminate_cycles;
DECLARE_LIST (alabel_t_list, alabel_t);
alabel_t alabel_t_zero (void);
alabel_t alabel_t_one (void);
alabel_t alabel_t_wild (void);
INT_PTR alabel_t_get_stamp (alabel_t e);
alabel_t alabel_t_fresh (const char *name);
alabel_t alabel_t_union (alabel_t_list exprs);
alabel_t alabel_t_inter (alabel_t_list exprs);
alabel_t alabel_t_constant (const char *name);
bool alabel_t_eq (alabel_t e1, alabel_t e2);
int alabel_t_cmp (const alabel_t e1, const alabel_t e2);
bool alabel_t_is_constant (alabel_t e, const char *name);
void alabel_t_inclusion (alabel_t e1, alabel_t e2);
void alabel_t_unify (alabel_t e1, alabel_t e2);
alabel_t_list alabel_t_tlb (alabel_t e);

void alabel_t_print (FILE * arg1, alabel_t arg2);
extern bool flag_occurs_check;
DECLARE_LIST (L_list, L);
L L_zero (void);
L L_one (void);
L L_wild (void);
L L_fresh (const char *name);
L L_constant (const char *name);
bool L_is_constant (L e, const char *name);
void L_unify (L e1, L e2);
void L_cunify (L e1, L e2);
L L_ecr (L e);

L L_cmp (const L e1, const L e2);

L L_eq (L e1, L e2);

bool L_is_lam (L e);
L lam (alabel_t arg1, argT arg2, T arg3);
struct lam_decon lam_decon (L arg1);
struct lam_decon
{
  alabel_t f0;
  argT f1;
  T f2;
};
void L_print (FILE * arg1, L arg2);
DECLARE_LIST (argT_map, argT_field);
argT_field argT_make_field (const char *label, T expr);
argT argT_zero (void);
argT argT_one (void);
argT argT_abs (void);
argT argT_wild (void);
argT argT_fresh (const char *name);
argT argT_row (argT_map fields, argT rest);
T argT_extract_field (const char *field_name, argT row);
argT argT_extract_rest (argT row);
argT_map argT_extract_fields (argT row);
bool argT_eq (argT row1, argT row2);
int argT_cmp (const argT row1, const argT row2);
void argT_inclusion (argT row1, argT row2);
void argT_unify (argT row1, argT row2);
void argT_print (FILE * f, argT row);

DECLARE_LIST (T_list, T);
T T_zero (void);
T T_one (void);
T T_wild (void);
T T_fresh (const char *name);
T T_constant (const char *name);
bool T_is_constant (T e, const char *name);
void T_unify (T e1, T e2);
void T_cunify (T e1, T e2);
T T_ecr (T e);

T T_cmp (const T e1, const T e2);

T T_eq (T e1, T e2);

bool T_is_ref (T e);
T ref (alabel_t arg1, T arg2, L arg3);
struct ref_decon ref_decon (T arg1);
struct ref_decon
{
  alabel_t f0;
  T f1;
  L f2;
};
void T_print (FILE * arg1, T arg2);
/*

Init/reset engine, print constraint graphs, serialize/deserialize constraint graphs

*/
void steensgaard_terms_init (void);
void steensgaard_terms_reset (void);
void steensgaard_terms_stats (FILE * arg1);
void steensgaard_terms_print_graph (FILE * arg1);
void steensgaard_terms_serialize (FILE * arg1, hash_table * arg2,
				  unsigned long arg3);
hash_table *steensgaard_terms_deserialize (FILE * arg1);
void steensgaard_terms_region_serialize (FILE * arg1);
void steensgaard_terms_region_deserialize (translation arg1, FILE * arg2);
EXTERN_C_END
#endif
