/*

DO NOT edit this file

*/
#ifndef LAMBDA_H
#define LAMBDA_H
#include "list.h"
#include <stdio.h>
#include "bool.h"
#include "linkage.h"
#include "hash.h"

EXTERN_C_BEGIN typedef struct l_type_ *l_type;

extern int flag_hash_cons;
extern bool flag_occurs_check;
DECLARE_LIST (l_type_list, l_type);
l_type l_type_zero (void);
l_type l_type_one (void);
l_type l_type_wild (void);
l_type l_type_fresh (const char *name);
l_type l_type_constant (const char *name);
bool l_type_is_constant (l_type e, const char *name);
void l_type_unify (l_type e1, l_type e2);
void l_type_cunify (l_type e1, l_type e2);
l_type l_type_ecr (l_type e);

l_type l_type_cmp (const l_type e1, const l_type e2);

l_type l_type_eq (l_type e1, l_type e2);

l_type boolean (void);
bool l_type_is_boolean (l_type arg1);
l_type integer (void);
bool l_type_is_integer (l_type arg1);
bool l_type_is_function (l_type e);
l_type function (l_type arg1, l_type arg2);
struct function_decon function_decon (l_type arg1);
struct function_decon
{
  l_type f0;
  l_type f1;
};
void l_type_print (FILE * arg1, l_type arg2);
/*

Init/reset engine, print constraint graphs, serialize/deserialize constraint graphs

*/
void lambda_init (void);
void lambda_reset (void);
void lambda_stats (FILE * arg1);
void lambda_print_graph (FILE * arg1);
void lambda_serialize (FILE * arg1, hash_table * arg2, unsigned long arg3);
hash_table *lambda_deserialize (FILE * arg1);
void lambda_region_serialize (FILE * arg1);
void lambda_region_deserialize (translation arg1, FILE * arg2);
EXTERN_C_END
#endif
