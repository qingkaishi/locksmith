/*

DO NOT edit this file

*/
#ifndef ANDERSEN_TERMS_H
#define ANDERSEN_TERMS_H
#include "list.h"
#include <stdio.h>
#include "bool.h"
#include "linkage.h"
#include "hash.h"

EXTERN_C_BEGIN

typedef struct alabel_t_* alabel_t;
typedef struct argT_* argT;
typedef struct argT_field_* argT_field;
typedef struct T_* T;

extern int flag_hash_cons;
extern bool flag_merge_projections;
extern bool flag_eliminate_cycles;
DECLARE_LIST(alabel_t_list,alabel_t);
alabel_t alabel_t_zero(void);
alabel_t alabel_t_one(void);
alabel_t alabel_t_wild(void);
INT_PTR alabel_t_get_stamp(alabel_t e);
alabel_t alabel_t_fresh(const char *name);
alabel_t alabel_t_union(alabel_t_list exprs);
alabel_t alabel_t_inter(alabel_t_list exprs);
alabel_t alabel_t_constant(const char *name);
bool alabel_t_eq(alabel_t e1, alabel_t e2);
int alabel_t_cmp(const alabel_t e1,const alabel_t e2);
bool alabel_t_is_constant(alabel_t e,const char *name);
void alabel_t_inclusion(alabel_t e1,alabel_t e2);
void alabel_t_unify(alabel_t e1,alabel_t e2);
alabel_t_list alabel_t_tlb(alabel_t e);

void alabel_t_print(FILE* arg1,alabel_t arg2);
DECLARE_LIST(argT_map,argT_field);
argT_field argT_make_field(const char *label,T expr);
argT argT_zero(void);
argT argT_one(void);
argT argT_abs(void);
argT argT_wild(void);
argT argT_fresh(const char *name);
argT argT_row(argT_map fields,argT rest) ;
T argT_extract_field(const char *field_name,argT row);
argT argT_extract_rest(argT row);
argT_map argT_extract_fields(argT row);
bool argT_eq(argT row1, argT row2);
int argT_cmp(const argT row1,const argT row2);
void argT_inclusion(argT row1,argT row2) ;
void argT_unify(argT row1,argT row2);
void argT_print(FILE *f,argT row);

DECLARE_LIST(T_list,T);
T T_zero(void);
T T_one(void);
T T_wild(void);
INT_PTR T_get_stamp(T e);
T T_fresh(const char *name);
T T_union(T_list exprs);
T T_inter(T_list exprs);
T T_constant(const char *name);
bool T_eq(T e1, T e2);
int T_cmp(const T e1,const T e2);
bool T_is_constant(T e,const char *name);
void T_inclusion(T e1,T e2);
void T_unify(T e1,T e2);
T_list T_tlb(T e);

bool T_is_ref(T e);
T ref(alabel_t arg1,T arg2,T arg3);
struct ref_decon ref_decon(T arg1);
struct ref_decon
{
alabel_t f0;
T f1;
T f2;
};
alabel_t ref_proj0(T arg1);
T ref_pat0(alabel_t arg1);
T ref_proj1(T arg1);
T ref_pat1(T arg1);
T ref_proj2(T arg1);
T ref_pat2(T arg1);
bool T_is_lam(T e);
T lam(alabel_t arg1,argT arg2,T arg3);
struct lam_decon lam_decon(T arg1);
struct lam_decon
{
alabel_t f0;
argT f1;
T f2;
};
alabel_t lam_proj0(T arg1);
T lam_pat0(alabel_t arg1);
argT lam_proj1(T arg1);
T lam_pat1(argT arg1);
T lam_proj2(T arg1);
T lam_pat2(T arg1);
void T_print(FILE* arg1,T arg2);
/*

Init/reset engine, print constraint graphs, serialize/deserialize constraint graphs

*/
void andersen_terms_init(void);
void andersen_terms_reset(void);
void andersen_terms_stats(FILE * arg1);
void andersen_terms_print_graph(FILE * arg1);
void andersen_terms_serialize(FILE * arg1,hash_table * arg2,unsigned long arg3);
hash_table * andersen_terms_deserialize(FILE * arg1);
void andersen_terms_region_serialize(FILE * arg1);
void andersen_terms_region_deserialize(translation arg1,FILE * arg2);
EXTERN_C_END
#endif
