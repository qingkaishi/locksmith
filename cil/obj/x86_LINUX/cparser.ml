type token =
  | IDENT of (string * Cabs.cabsloc)
  | QUALIFIER of (string * Cabs.cabsloc)
  | CST_CHAR of (int64 list * Cabs.cabsloc)
  | CST_WCHAR of (int64 list * Cabs.cabsloc)
  | CST_INT of (string * Cabs.cabsloc)
  | CST_FLOAT of (string * Cabs.cabsloc)
  | NAMED_TYPE of (string * Cabs.cabsloc)
  | CST_STRING of (int64 list * Cabs.cabsloc)
  | CST_WSTRING of (int64 list * Cabs.cabsloc)
  | EOF
  | CHAR of (Cabs.cabsloc)
  | INT of (Cabs.cabsloc)
  | BOOL of (Cabs.cabsloc)
  | DOUBLE of (Cabs.cabsloc)
  | FLOAT of (Cabs.cabsloc)
  | VOID of (Cabs.cabsloc)
  | INT64 of (Cabs.cabsloc)
  | INT32 of (Cabs.cabsloc)
  | ENUM of (Cabs.cabsloc)
  | STRUCT of (Cabs.cabsloc)
  | TYPEDEF of (Cabs.cabsloc)
  | UNION of (Cabs.cabsloc)
  | SIGNED of (Cabs.cabsloc)
  | UNSIGNED of (Cabs.cabsloc)
  | LONG of (Cabs.cabsloc)
  | SHORT of (Cabs.cabsloc)
  | VOLATILE of (Cabs.cabsloc)
  | EXTERN of (Cabs.cabsloc)
  | STATIC of (Cabs.cabsloc)
  | CONST of (Cabs.cabsloc)
  | RESTRICT of (Cabs.cabsloc)
  | AUTO of (Cabs.cabsloc)
  | REGISTER of (Cabs.cabsloc)
  | THREAD of (Cabs.cabsloc)
  | SIZEOF of (Cabs.cabsloc)
  | ALIGNOF of (Cabs.cabsloc)
  | EQ
  | PLUS_EQ
  | MINUS_EQ
  | STAR_EQ
  | SLASH_EQ
  | PERCENT_EQ
  | AND_EQ
  | PIPE_EQ
  | CIRC_EQ
  | INF_INF_EQ
  | SUP_SUP_EQ
  | ARROW
  | DOT
  | EQ_EQ
  | EXCLAM_EQ
  | INF
  | SUP
  | INF_EQ
  | SUP_EQ
  | PLUS of (Cabs.cabsloc)
  | MINUS of (Cabs.cabsloc)
  | STAR of (Cabs.cabsloc)
  | SLASH
  | PERCENT
  | TILDE of (Cabs.cabsloc)
  | AND of (Cabs.cabsloc)
  | PIPE
  | CIRC
  | EXCLAM of (Cabs.cabsloc)
  | AND_AND of (Cabs.cabsloc)
  | PIPE_PIPE
  | INF_INF
  | SUP_SUP
  | PLUS_PLUS of (Cabs.cabsloc)
  | MINUS_MINUS of (Cabs.cabsloc)
  | RPAREN
  | LPAREN of (Cabs.cabsloc)
  | RBRACE of (Cabs.cabsloc)
  | LBRACE of (Cabs.cabsloc)
  | LBRACKET
  | RBRACKET
  | COLON
  | SEMICOLON of (Cabs.cabsloc)
  | COMMA
  | ELLIPSIS
  | QUEST
  | BREAK of (Cabs.cabsloc)
  | CONTINUE of (Cabs.cabsloc)
  | GOTO of (Cabs.cabsloc)
  | RETURN of (Cabs.cabsloc)
  | SWITCH of (Cabs.cabsloc)
  | CASE of (Cabs.cabsloc)
  | DEFAULT of (Cabs.cabsloc)
  | WHILE of (Cabs.cabsloc)
  | DO of (Cabs.cabsloc)
  | FOR of (Cabs.cabsloc)
  | IF of (Cabs.cabsloc)
  | TRY of (Cabs.cabsloc)
  | EXCEPT of (Cabs.cabsloc)
  | FINALLY of (Cabs.cabsloc)
  | ELSE
  | ATTRIBUTE of (Cabs.cabsloc)
  | INLINE of (Cabs.cabsloc)
  | ASM of (Cabs.cabsloc)
  | TYPEOF of (Cabs.cabsloc)
  | FUNCTION__ of (Cabs.cabsloc)
  | PRETTY_FUNCTION__ of (Cabs.cabsloc)
  | LABEL__
  | BUILTIN_VA_ARG of (Cabs.cabsloc)
  | ATTRIBUTE_USED of (Cabs.cabsloc)
  | BUILTIN_VA_LIST
  | BLOCKATTRIBUTE
  | BUILTIN_TYPES_COMPAT of (Cabs.cabsloc)
  | BUILTIN_OFFSETOF of (Cabs.cabsloc)
  | DECLSPEC of (Cabs.cabsloc)
  | MSASM of (string * Cabs.cabsloc)
  | MSATTR of (string * Cabs.cabsloc)
  | PRAGMA_LINE of (string * Cabs.cabsloc)
  | PRAGMA of (Cabs.cabsloc)
  | PRAGMA_EOL
  | AT_TRANSFORM of (Cabs.cabsloc)
  | AT_TRANSFORMEXPR of (Cabs.cabsloc)
  | AT_SPECIFIER of (Cabs.cabsloc)
  | AT_EXPR of (Cabs.cabsloc)
  | AT_NAME

open Parsing;;
# 44 "src/frontc/cparser.mly"
open Cabs
open Cabshelper
module E = Errormsg

let parse_error msg : unit =       (* sm: c++-mode highlight hack: -> ' <- *)
  E.parse_error msg

let print = print_string

(* unit -> string option *)
(*
let getComments () =
  match !comments with
    [] -> None
  | _ -> 
      let r = Some(String.concat "\n" (List.rev !comments)) in
      comments := [];
      r
*)

let cabslu = {lineno = -10; 
	      filename = "cabs loc unknown"; 
	      byteno = -10;
              ident = 0;}

(* cabsloc -> cabsloc *)
(*
let handleLoc l =
  l.clcomment <- getComments();
  l
*)

(*
** Expression building
*)
let smooth_expression lst =
  match lst with
    [] -> NOTHING
  | [expr] -> expr
  | _ -> COMMA (lst)


let currentFunctionName = ref "<outside any function>"
    
let announceFunctionName ((n, decl, _, _):name) =
  !Lexerhack.add_identifier n;
  (* Start a context that includes the parameter names and the whole body. 
   * Will pop when we finish parsing the function body *)
  !Lexerhack.push_context ();
  (* Go through all the parameter names and mark them as identifiers *)
  let rec findProto = function
      PROTO (d, args, _) when isJUSTBASE d -> 
        List.iter (fun (_, (an, _, _, _)) -> !Lexerhack.add_identifier an) args

    | PROTO (d, _, _) -> findProto d
    | PARENTYPE (_, d, _) -> findProto d
    | PTR (_, d) -> findProto d
    | ARRAY (d, _, _) -> findProto d
    | _ -> parse_error "Cannot find the prototype in a function definition";
           raise Parsing.Parse_error 

  and isJUSTBASE = function
      JUSTBASE -> true
    | PARENTYPE (_, d, _) -> isJUSTBASE d
    | _ -> false
  in
  findProto decl;
  currentFunctionName := n



let applyPointer (ptspecs: attribute list list) (dt: decl_type)  
       : decl_type = 
  (* Outer specification first *)
  let rec loop = function
      [] -> dt
    | attrs :: rest -> PTR(attrs, loop rest)
  in
  loop ptspecs

let doDeclaration (loc: cabsloc) (specs: spec_elem list) (nl: init_name list) : definition = 
  if isTypedef specs then begin
    (* Tell the lexer about the new type names *)
    List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_type n) nl;
    TYPEDEF ((specs, List.map (fun (n, _) -> n) nl), loc)
  end else
    if nl = [] then
      ONLYTYPEDEF (specs, loc)
    else begin
      (* Tell the lexer about the new variable names *)
      List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_identifier n) nl;
      DECDEF ((specs, nl), loc)  
    end


let doFunctionDef (loc: cabsloc)
                  (lend: cabsloc)
                  (specs: spec_elem list) 
                  (n: name) 
                  (b: block) : definition = 
  let fname = (specs, n) in
  FUNDEF (fname, b, loc, lend)


let doOldParDecl (names: string list)
                 ((pardefs: name_group list), (isva: bool)) 
    : single_name list * bool =
  let findOneName n =
    (* Search in pardefs for the definition for this parameter *)
    let rec loopGroups = function
        [] -> ([SpecType Tint], (n, JUSTBASE, [], cabslu))
      | (specs, names) :: restgroups ->
          let rec loopNames = function
              [] -> loopGroups restgroups
            | ((n',_, _, _) as sn) :: _ when n' = n -> (specs, sn)
            | _ :: restnames -> loopNames restnames
          in
          loopNames names
    in
    loopGroups pardefs
  in
  let args = List.map findOneName names in
  (args, isva)

let checkConnective (s : string) : unit =
begin
  (* checking this means I could possibly have more connectives, with *)
  (* different meaning *)
  if (s <> "to") then (
    parse_error "transformer connective must be 'to'";
    raise Parsing.Parse_error
  )
  else ()
end

let int64_to_char value =
  if (compare value (Int64.of_int 255) > 0) || (compare value Int64.zero < 0) then
    begin
      let msg = Printf.sprintf "cparser:intlist_to_string: character 0x%Lx too big" value in
      parse_error msg;
      raise Parsing.Parse_error
    end
  else
    Char.chr (Int64.to_int value)

(* takes a not-nul-terminated list, and converts it to a string. *)
let rec intlist_to_string (str: int64 list):string =
  match str with
    [] -> ""  (* add nul-termination *)
  | value::rest ->
      let this_char = int64_to_char value in
      (String.make 1 this_char) ^ (intlist_to_string rest)

let fst3 (result, _, _) = result
let snd3 (_, result, _) = result
let trd3 (_, _, result) = result


(*
   transform:  __builtin_offsetof(type, member)
   into     :  (size_t) (&(type * ) 0)->member
 *)

let transformOffsetOf (speclist, dtype) member =
  let rec addPointer = function
    | JUSTBASE ->
	PTR([], JUSTBASE)
    | PARENTYPE (attrs1, dtype, attrs2) ->
	PARENTYPE (attrs1, addPointer dtype, attrs2)
    | ARRAY (dtype, attrs, expr) ->
	ARRAY (addPointer dtype, attrs, expr)
    | PTR (attrs, dtype) ->
	PTR (attrs, addPointer dtype)
    | PROTO (dtype, names, variadic) ->
	PROTO (addPointer dtype, names, variadic)
  in
  let nullType = (speclist, addPointer dtype) in
  let nullExpr = CONSTANT (CONST_INT "0") in
  let castExpr = CAST (nullType, SINGLE_INIT nullExpr) in

  let rec replaceBase = function
    | VARIABLE field ->
	MEMBEROFPTR (castExpr, field)
    | MEMBEROF (base, field) ->
	MEMBEROF (replaceBase base, field)
    | INDEX (base, index) ->
	INDEX (replaceBase base, index)
    | _ ->
	parse_error "malformed offset expression in __builtin_offsetof";
        raise Parsing.Parse_error 
  in
  let memberExpr = replaceBase member in
  let addrExpr = UNARY (ADDROF, memberExpr) in
  (* slight cheat: hard-coded assumption that size_t == unsigned int *)
  let sizeofType = [SpecType Tunsigned], JUSTBASE in
  let resultExpr = CAST (sizeofType, SINGLE_INIT addrExpr) in
  resultExpr

# 325 "src/frontc/cparser.ml"
let yytransl_const = [|
    0 (* EOF *);
  292 (* EQ *);
  293 (* PLUS_EQ *);
  294 (* MINUS_EQ *);
  295 (* STAR_EQ *);
  296 (* SLASH_EQ *);
  297 (* PERCENT_EQ *);
  298 (* AND_EQ *);
  299 (* PIPE_EQ *);
  300 (* CIRC_EQ *);
  301 (* INF_INF_EQ *);
  302 (* SUP_SUP_EQ *);
  303 (* ARROW *);
  304 (* DOT *);
  305 (* EQ_EQ *);
  306 (* EXCLAM_EQ *);
  307 (* INF *);
  308 (* SUP *);
  309 (* INF_EQ *);
  310 (* SUP_EQ *);
  314 (* SLASH *);
  315 (* PERCENT *);
  318 (* PIPE *);
  319 (* CIRC *);
  322 (* PIPE_PIPE *);
  323 (* INF_INF *);
  324 (* SUP_SUP *);
  327 (* RPAREN *);
  331 (* LBRACKET *);
  332 (* RBRACKET *);
  333 (* COLON *);
  335 (* COMMA *);
  336 (* ELLIPSIS *);
  337 (* QUEST *);
  352 (* ELSE *);
  359 (* LABEL__ *);
  362 (* BUILTIN_VA_LIST *);
  363 (* BLOCKATTRIBUTE *);
  371 (* PRAGMA_EOL *);
  376 (* AT_NAME *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* QUALIFIER *);
  259 (* CST_CHAR *);
  260 (* CST_WCHAR *);
  261 (* CST_INT *);
  262 (* CST_FLOAT *);
  263 (* NAMED_TYPE *);
  264 (* CST_STRING *);
  265 (* CST_WSTRING *);
  266 (* CHAR *);
  267 (* INT *);
  268 (* BOOL *);
  269 (* DOUBLE *);
  270 (* FLOAT *);
  271 (* VOID *);
  272 (* INT64 *);
  273 (* INT32 *);
  274 (* ENUM *);
  275 (* STRUCT *);
  276 (* TYPEDEF *);
  277 (* UNION *);
  278 (* SIGNED *);
  279 (* UNSIGNED *);
  280 (* LONG *);
  281 (* SHORT *);
  282 (* VOLATILE *);
  283 (* EXTERN *);
  284 (* STATIC *);
  285 (* CONST *);
  286 (* RESTRICT *);
  287 (* AUTO *);
  288 (* REGISTER *);
  289 (* THREAD *);
  290 (* SIZEOF *);
  291 (* ALIGNOF *);
  311 (* PLUS *);
  312 (* MINUS *);
  313 (* STAR *);
  316 (* TILDE *);
  317 (* AND *);
  320 (* EXCLAM *);
  321 (* AND_AND *);
  325 (* PLUS_PLUS *);
  326 (* MINUS_MINUS *);
  328 (* LPAREN *);
  329 (* RBRACE *);
  330 (* LBRACE *);
  334 (* SEMICOLON *);
  338 (* BREAK *);
  339 (* CONTINUE *);
  340 (* GOTO *);
  341 (* RETURN *);
  342 (* SWITCH *);
  343 (* CASE *);
  344 (* DEFAULT *);
  345 (* WHILE *);
  346 (* DO *);
  347 (* FOR *);
  348 (* IF *);
  349 (* TRY *);
  350 (* EXCEPT *);
  351 (* FINALLY *);
  353 (* ATTRIBUTE *);
  354 (* INLINE *);
  355 (* ASM *);
  356 (* TYPEOF *);
  357 (* FUNCTION__ *);
  358 (* PRETTY_FUNCTION__ *);
  360 (* BUILTIN_VA_ARG *);
  361 (* ATTRIBUTE_USED *);
  364 (* BUILTIN_TYPES_COMPAT *);
  365 (* BUILTIN_OFFSETOF *);
  366 (* DECLSPEC *);
  367 (* MSASM *);
  368 (* MSATTR *);
  369 (* PRAGMA_LINE *);
  370 (* PRAGMA *);
  372 (* AT_TRANSFORM *);
  373 (* AT_TRANSFORMEXPR *);
  374 (* AT_SPECIFIER *);
  375 (* AT_EXPR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\003\000\051\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\055\000\055\000\055\000\056\000\056\000\057\000\057\000\
\057\000\057\000\057\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\059\000\059\000\
\059\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\062\000\
\062\000\063\000\063\000\063\000\063\000\064\000\064\000\064\000\
\065\000\065\000\065\000\066\000\066\000\066\000\066\000\066\000\
\067\000\067\000\067\000\068\000\068\000\069\000\069\000\070\000\
\070\000\071\000\071\000\072\000\072\000\073\000\073\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\011\000\009\000\009\000\009\000\009\000\
\009\000\009\000\010\000\075\000\018\000\018\000\019\000\019\000\
\019\000\076\000\076\000\076\000\013\000\013\000\021\000\021\000\
\060\000\060\000\020\000\020\000\020\000\077\000\077\000\022\000\
\022\000\022\000\023\000\023\000\078\000\016\000\016\000\012\000\
\012\000\014\000\014\000\014\000\079\000\079\000\015\000\015\000\
\017\000\017\000\035\000\035\000\080\000\081\000\081\000\036\000\
\036\000\036\000\036\000\036\000\037\000\037\000\038\000\038\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\083\000\083\000\031\000\031\000\041\000\041\000\040\000\040\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\087\000\087\000\088\000\088\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\026\000\026\000\026\000\026\000\
\026\000\026\000\044\000\044\000\043\000\043\000\043\000\030\000\
\030\000\030\000\029\000\029\000\042\000\045\000\045\000\045\000\
\045\000\045\000\091\000\092\000\092\000\093\000\093\000\093\000\
\028\000\028\000\028\000\028\000\027\000\094\000\094\000\039\000\
\039\000\054\000\054\000\054\000\095\000\095\000\095\000\049\000\
\050\000\050\000\034\000\034\000\048\000\048\000\046\000\046\000\
\046\000\046\000\047\000\047\000\032\000\033\000\033\000\033\000\
\033\000\033\000\052\000\052\000\052\000\005\000\005\000\006\000\
\006\000\006\000\089\000\089\000\089\000\089\000\089\000\084\000\
\084\000\096\000\096\000\096\000\096\000\098\000\098\000\090\000\
\090\000\053\000\053\000\053\000\100\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\100\000\100\000\100\000\101\000\
\101\000\101\000\101\000\101\000\101\000\102\000\102\000\102\000\
\102\000\102\000\102\000\102\000\102\000\102\000\102\000\102\000\
\103\000\104\000\104\000\104\000\104\000\105\000\105\000\105\000\
\106\000\106\000\106\000\107\000\107\000\107\000\107\000\107\000\
\108\000\108\000\108\000\109\000\109\000\110\000\110\000\111\000\
\111\000\112\000\112\000\113\000\113\000\114\000\114\000\099\000\
\115\000\115\000\115\000\116\000\116\000\082\000\082\000\097\000\
\097\000\007\000\007\000\007\000\085\000\085\000\086\000\086\000\
\117\000\117\000\119\000\119\000\120\000\120\000\118\000\118\000\
\121\000\121\000\122\000\122\000\123\000\123\000\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\000\000\002\000\002\000\000\000\001\000\001\000\
\003\000\005\000\005\000\001\000\006\000\004\000\008\000\008\000\
\003\000\001\000\001\000\004\000\000\000\001\000\001\000\001\000\
\001\000\003\000\004\000\001\000\002\000\004\000\006\000\006\000\
\006\000\003\000\003\000\002\000\002\000\006\000\001\000\003\000\
\002\000\001\000\002\000\002\000\002\000\004\000\002\000\004\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\004\000\001\000\003\000\003\000\003\000\001\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\003\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\005\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\001\000\002\000\
\002\000\001\000\001\000\001\000\001\000\003\000\001\000\003\000\
\000\000\001\000\003\000\002\000\001\000\001\000\000\000\003\000\
\004\000\005\000\000\000\001\000\002\000\000\000\001\000\000\000\
\001\000\001\000\003\000\003\000\000\000\001\000\003\000\003\000\
\003\000\003\000\005\000\003\000\001\000\000\000\002\000\000\000\
\002\000\002\000\002\000\002\000\000\000\004\000\001\000\003\000\
\001\000\002\000\001\000\003\000\005\000\003\000\003\000\005\000\
\008\000\004\000\004\000\006\000\002\000\002\000\003\000\002\000\
\002\000\003\000\004\000\007\000\001\000\005\000\004\000\003\000\
\002\000\001\000\003\000\002\000\001\000\003\000\001\000\003\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\004\000\000\000\001\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\003\000\005\000\004\000\006\000\005\000\002\000\
\005\000\004\000\006\000\005\000\002\000\006\000\005\000\007\000\
\006\000\001\000\004\000\004\000\000\000\003\000\002\000\004\000\
\002\000\003\000\001\000\003\000\001\000\004\000\002\000\001\000\
\003\000\003\000\001\000\003\000\003\000\001\000\004\000\005\000\
\005\000\004\000\001\000\000\000\002\000\000\000\002\000\003\000\
\002\000\002\000\001\000\003\000\002\000\005\000\003\000\001\000\
\003\000\000\000\004\000\004\000\001\000\003\000\001\000\003\000\
\000\000\001\000\002\000\001\000\003\000\001\000\004\000\003\000\
\004\000\004\000\001\000\000\000\002\000\002\000\002\000\004\000\
\005\000\003\000\001\000\001\000\001\000\000\000\002\000\000\000\
\002\000\005\000\004\000\002\000\001\000\001\000\001\000\000\000\
\002\000\001\000\001\000\001\000\001\000\004\000\002\000\001\000\
\002\000\003\000\004\000\001\000\001\000\001\000\003\000\002\000\
\001\000\001\000\001\000\003\000\003\000\003\000\001\000\001\000\
\003\000\002\000\003\000\003\000\004\000\001\000\002\000\004\000\
\002\000\004\000\002\000\002\000\002\000\002\000\002\000\002\000\
\001\000\001\000\003\000\003\000\003\000\001\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\003\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\005\000\001\000\
\001\000\003\000\003\000\000\000\001\000\003\000\003\000\003\000\
\003\000\000\000\002\000\002\000\001\000\002\000\000\000\003\000\
\000\000\001\000\001\000\003\000\005\000\005\000\000\000\003\000\
\000\000\003\000\000\000\002\000\001\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\055\001\234\000\208\000\211\000\
\209\000\215\000\214\000\207\000\213\000\000\000\000\000\000\000\
\000\000\216\000\217\000\212\000\210\000\044\001\000\000\000\000\
\043\001\045\001\000\000\000\000\054\001\000\000\000\000\000\000\
\000\000\000\000\000\000\053\001\068\001\000\000\000\000\000\000\
\000\000\159\001\000\000\002\000\000\000\000\000\000\000\007\000\
\008\000\000\000\000\000\000\000\012\000\000\000\160\001\000\000\
\000\000\018\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\204\000\193\000\
\000\000\000\000\000\000\114\000\115\000\116\000\000\000\000\000\
\109\000\194\000\195\000\196\000\197\000\005\000\000\000\199\000\
\000\000\000\000\000\000\052\001\000\000\000\000\070\001\079\001\
\075\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\074\001\000\000\080\001\000\000\097\001\
\098\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\128\001\000\000\000\000\000\000\001\000\
\004\000\000\000\188\000\039\001\000\000\000\000\000\000\026\001\
\000\000\206\000\198\000\006\000\149\000\037\001\000\000\000\000\
\200\000\201\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\248\000\000\000\000\000\063\001\000\000\000\000\
\000\000\000\000\065\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\110\000\000\000\000\000\000\000\023\000\103\000\
\104\000\101\000\102\000\111\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\105\000\000\000\025\000\
\000\000\000\000\000\000\028\000\000\000\056\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\088\000\100\000\000\000\000\000\000\000\072\001\000\000\
\000\000\082\001\000\000\000\000\087\001\000\000\089\001\091\001\
\092\001\093\001\096\001\094\001\095\001\000\000\000\000\000\000\
\066\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\001\059\001\060\001\000\000\058\001\000\000\
\000\000\187\000\000\000\000\000\000\000\254\000\013\001\000\000\
\000\000\000\000\017\000\000\000\014\000\000\000\000\000\009\001\
\010\001\000\000\000\000\000\000\005\001\040\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\239\000\
\000\000\000\000\000\000\000\000\000\000\000\000\221\000\241\000\
\000\000\000\000\000\000\226\000\000\000\000\000\000\000\000\000\
\000\000\000\000\133\001\000\000\051\001\000\000\000\000\045\000\
\000\000\047\000\049\000\050\000\051\000\054\000\052\000\053\000\
\055\000\000\000\043\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\235\000\113\000\112\000\
\027\001\000\000\236\000\000\000\000\000\036\000\037\000\000\000\
\000\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\135\001\000\000\000\000\134\001\081\001\076\001\077\001\000\000\
\000\000\071\001\078\001\067\001\083\001\084\001\000\000\099\001\
\100\001\101\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\202\000\024\001\047\001\190\000\
\000\000\117\000\192\000\000\000\000\000\000\000\000\000\253\000\
\000\000\000\000\148\000\000\000\000\000\000\000\000\000\017\001\
\000\000\000\000\012\001\000\000\000\000\000\000\000\000\007\001\
\000\000\252\000\250\000\249\000\231\000\062\001\020\000\000\000\
\000\000\000\000\242\000\247\000\238\000\000\000\000\000\000\000\
\220\000\223\000\000\000\225\000\228\000\000\000\010\000\137\001\
\136\001\011\000\000\000\000\000\000\000\144\000\000\000\000\000\
\143\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
\035\000\034\000\000\000\135\000\000\000\000\000\000\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\059\000\060\000\061\000\058\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\137\000\000\000\
\131\001\130\001\000\000\000\000\085\001\000\000\000\000\000\000\
\000\000\000\000\000\000\125\000\000\000\122\000\000\000\000\000\
\000\000\000\000\000\000\015\001\000\000\000\000\000\000\000\000\
\049\001\000\000\000\000\151\000\000\000\000\000\161\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\181\000\000\000\000\000\000\000\
\163\000\000\000\000\000\023\001\000\000\000\000\013\000\000\000\
\000\000\003\001\029\001\000\000\000\000\008\001\230\000\233\000\
\000\000\000\000\244\000\240\000\222\000\227\000\000\000\000\000\
\000\000\140\000\139\000\000\000\057\000\000\000\000\000\000\000\
\027\000\000\000\030\000\146\000\145\000\000\000\127\001\000\000\
\000\000\000\000\000\000\000\000\126\000\000\000\133\000\118\000\
\124\000\255\000\000\000\000\000\142\000\000\000\000\000\002\001\
\160\000\158\000\000\000\000\000\176\000\177\000\000\000\000\000\
\174\000\000\000\000\000\000\000\000\000\173\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\154\000\
\162\000\153\000\147\000\156\000\000\000\000\000\032\001\000\000\
\000\000\000\000\232\000\246\000\000\000\000\000\000\000\039\000\
\000\000\087\000\000\000\000\000\132\000\128\000\000\000\000\000\
\120\000\123\000\014\001\001\001\000\001\000\000\184\000\000\000\
\000\000\178\000\000\000\175\000\000\000\166\000\000\000\000\000\
\167\000\000\000\000\000\000\000\186\000\000\000\000\000\000\000\
\000\000\139\001\140\001\000\000\022\001\019\001\020\001\031\001\
\034\001\033\001\038\000\031\000\032\000\000\000\033\000\041\000\
\015\000\016\000\129\000\000\000\050\001\170\000\057\001\179\000\
\171\000\000\000\000\000\185\000\000\000\000\000\000\000\183\000\
\108\000\000\000\000\000\040\000\130\000\000\000\168\000\000\000\
\165\000\182\000\142\001\000\000\000\000\172\000\000\000\000\000\
\000\000\000\000\147\001\000\000\000\000\000\000\000\000\000\000\
\144\001\000\000\000\000\180\000\169\000\154\001\000\000\148\001\
\000\000\000\000\152\001\000\000\000\000\000\000\156\001\150\001\
\149\001\000\000\158\001"

let yydgoto = "\003\000\
\042\000\043\000\044\000\045\000\022\001\192\001\159\002\078\002\
\205\000\206\000\094\001\030\002\044\002\079\002\208\000\253\001\
\114\001\080\000\209\000\045\002\046\002\047\002\182\002\166\000\
\047\000\167\000\132\000\152\000\155\000\156\000\048\000\049\000\
\050\000\211\000\081\002\082\002\034\001\197\001\149\000\133\000\
\134\000\059\001\060\001\061\001\205\001\206\001\207\001\168\002\
\136\000\062\001\051\000\052\000\168\000\202\001\030\001\049\001\
\212\000\213\000\177\002\049\002\214\000\215\000\216\000\217\000\
\218\000\219\000\220\000\221\000\222\000\223\000\224\000\225\000\
\226\000\227\000\242\002\081\000\126\002\050\002\134\002\143\000\
\199\001\092\000\206\002\192\002\243\002\253\002\082\000\139\000\
\054\000\065\000\193\001\153\000\045\001\031\001\086\002\024\001\
\181\000\066\000\229\000\110\000\111\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\121\000\122\000\
\123\000\124\000\230\000\076\001\001\003\009\003\002\003\003\003\
\004\003\019\003\023\003"

let yysindex = "\017\002\
\115\013\115\013\000\000\064\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\221\255\251\255\038\016\
\030\000\000\000\000\000\000\000\000\000\000\000\125\014\038\016\
\000\000\000\000\038\016\038\016\000\000\115\013\081\255\038\016\
\099\255\104\255\111\255\000\000\000\000\189\023\114\255\124\255\
\133\255\000\000\216\000\000\000\115\013\116\255\070\016\000\000\
\000\000\039\255\227\255\038\016\000\000\038\016\000\000\004\000\
\043\015\000\000\000\000\028\000\201\255\111\255\241\255\035\000\
\058\000\029\000\215\010\045\000\059\000\038\016\000\000\000\000\
\215\010\055\000\092\000\000\000\000\000\000\000\152\015\098\255\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\000\000\
\098\255\102\010\015\023\000\000\071\255\054\000\000\000\000\000\
\000\000\051\012\070\012\189\023\189\023\189\023\189\023\189\023\
\189\023\189\023\072\000\000\000\043\255\000\000\176\255\000\000\
\000\000\177\000\228\000\231\000\062\001\018\001\102\000\104\000\
\040\000\117\000\248\255\000\000\159\013\142\012\188\000\000\000\
\000\000\000\002\000\000\000\000\118\000\139\000\208\000\000\000\
\192\000\000\000\000\000\000\000\000\000\000\000\146\000\173\000\
\000\000\000\000\182\000\212\000\199\000\043\015\001\001\254\000\
\013\001\046\001\000\000\008\001\023\000\000\000\088\001\028\000\
\028\000\251\000\000\000\016\001\215\010\044\000\037\001\215\010\
\215\010\215\010\017\001\044\001\215\010\215\010\048\001\115\013\
\116\255\000\000\000\000\073\023\053\001\055\001\000\000\000\000\
\000\000\000\000\000\000\000\000\214\012\233\012\142\012\142\012\
\142\012\142\012\142\012\142\012\130\001\049\013\049\013\198\005\
\085\001\087\001\092\001\097\001\000\000\000\000\101\001\000\000\
\089\255\001\001\108\001\000\000\218\001\000\000\114\003\252\000\
\246\000\249\000\123\001\023\001\120\001\121\001\125\001\126\001\
\001\000\000\000\000\000\065\000\137\001\165\001\000\000\213\022\
\252\001\000\000\254\001\198\005\000\000\198\005\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\198\001\030\002\157\001\
\000\000\093\255\093\255\189\023\189\023\189\023\189\023\189\023\
\189\023\189\023\189\023\189\023\189\023\189\023\189\023\189\023\
\189\023\189\023\189\023\189\023\189\023\189\023\189\023\219\001\
\221\001\224\001\000\000\000\000\000\000\001\001\000\000\000\002\
\001\001\000\000\091\011\000\002\021\002\000\000\000\000\225\001\
\043\002\194\001\000\000\004\000\000\000\038\016\231\001\000\000\
\000\000\000\000\206\000\158\014\000\000\000\000\142\012\103\001\
\232\001\233\001\237\001\008\001\008\001\028\000\215\010\000\000\
\142\012\215\010\235\001\239\001\238\001\192\000\000\000\000\000\
\248\001\249\001\215\010\000\000\018\002\027\002\215\010\029\002\
\208\000\089\000\000\000\003\002\000\000\014\002\198\005\000\000\
\198\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\198\005\000\000\000\000\109\000\016\002\032\002\037\002\
\040\002\142\012\038\016\038\016\100\002\000\000\000\000\000\000\
\000\000\041\002\000\000\093\255\093\255\000\000\000\000\191\008\
\011\009\000\000\142\012\142\012\142\012\142\012\142\012\142\012\
\142\012\142\012\142\012\142\012\142\012\142\012\142\012\142\012\
\142\012\142\012\142\012\142\012\142\012\142\012\142\012\142\012\
\142\012\142\012\142\012\142\012\142\012\142\012\142\012\191\008\
\000\000\131\023\131\023\000\000\000\000\000\000\000\000\044\002\
\045\002\000\000\000\000\000\000\000\000\000\000\046\002\000\000\
\000\000\000\000\177\000\177\000\228\000\228\000\231\000\231\000\
\231\000\231\000\062\001\062\001\018\001\102\000\104\000\040\000\
\117\000\042\002\116\002\120\002\000\000\000\000\000\000\000\000\
\218\007\000\000\000\000\001\001\004\000\000\002\051\002\000\000\
\043\015\033\001\000\000\047\002\049\002\111\255\078\005\000\000\
\123\255\052\002\000\000\011\001\249\002\163\001\050\002\000\000\
\254\000\000\000\000\000\000\000\000\000\000\000\000\000\065\002\
\066\002\008\001\000\000\000\000\000\000\142\012\225\255\215\010\
\000\000\000\000\067\002\000\000\000\000\068\002\000\000\000\000\
\000\000\000\000\053\002\071\002\073\002\000\000\191\008\191\008\
\000\000\163\011\000\000\069\002\070\002\072\002\074\002\011\001\
\000\000\000\000\077\002\000\000\075\002\034\000\076\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\252\000\252\000\
\246\000\246\000\249\000\249\000\249\000\249\000\123\001\123\001\
\023\001\120\001\121\001\125\001\126\001\081\002\000\000\080\002\
\000\000\000\000\079\002\079\002\000\000\189\023\086\002\088\002\
\000\000\093\255\142\012\000\000\084\002\000\000\111\002\089\002\
\097\002\091\011\103\002\000\000\105\002\087\009\098\255\108\002\
\000\000\043\002\146\000\000\000\077\002\128\002\000\000\102\002\
\129\002\087\255\038\008\078\002\142\012\132\002\078\002\253\006\
\138\002\078\002\039\255\136\000\000\000\078\005\139\002\078\005\
\000\000\143\002\078\005\000\000\140\002\142\002\000\000\147\002\
\001\001\000\000\000\000\043\015\191\008\000\000\000\000\000\000\
\148\002\000\002\000\000\000\000\000\000\000\000\079\002\079\002\
\079\002\000\000\000\000\218\007\000\000\038\016\038\016\093\255\
\000\000\001\001\000\000\000\000\000\000\142\012\000\000\115\013\
\142\012\235\255\218\255\218\007\000\000\091\011\000\000\000\000\
\000\000\000\000\038\016\130\000\000\000\146\002\152\002\000\000\
\000\000\000\000\017\255\040\255\000\000\000\000\149\002\191\008\
\000\000\151\002\163\009\253\006\179\000\000\000\253\006\154\002\
\136\002\062\006\253\006\024\001\136\000\136\000\161\002\000\000\
\000\000\000\000\000\000\000\000\123\255\185\015\000\000\155\002\
\163\002\159\002\000\000\000\000\164\002\165\002\167\002\000\000\
\008\000\000\000\166\002\168\002\000\000\000\000\235\255\142\012\
\000\000\000\000\000\000\000\000\000\000\000\002\000\000\253\006\
\040\255\000\000\162\002\000\000\109\000\000\000\253\006\142\012\
\000\000\040\255\078\002\174\002\000\000\191\008\157\002\078\002\
\039\255\000\000\000\000\236\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\253\002\000\000\000\000\
\000\000\000\000\000\000\179\002\000\000\000\000\000\000\000\000\
\000\000\180\002\178\002\000\000\182\002\253\006\039\255\000\000\
\000\000\236\002\181\002\000\000\000\000\253\006\000\000\191\008\
\000\000\000\000\000\000\186\002\192\002\000\000\193\002\013\003\
\195\002\194\002\000\000\098\255\196\002\253\006\200\002\186\002\
\000\000\186\002\205\002\000\000\000\000\000\000\203\002\000\000\
\239\009\236\002\000\000\213\002\217\002\211\002\000\000\000\000\
\000\000\236\002\000\000"

let yyrindex = "\000\000\
\021\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\255\175\000\
\000\000\000\000\175\000\175\000\000\000\016\000\000\000\175\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\207\000\080\000\000\000\
\000\000\000\000\000\000\175\000\000\000\175\000\000\000\011\015\
\222\002\000\000\000\000\000\000\000\000\000\000\000\000\199\001\
\000\000\107\000\221\002\057\002\000\000\175\000\000\000\000\000\
\221\002\171\002\000\000\000\000\000\000\000\000\000\000\016\014\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\066\016\217\023\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\250\023\000\000\
\000\000\097\024\198\024\145\013\017\003\169\007\057\003\236\009\
\169\005\063\001\162\000\000\000\046\003\000\000\000\000\000\000\
\000\000\045\255\000\000\000\000\241\002\000\000\141\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\230\003\000\000\
\000\000\000\000\254\002\060\255\000\000\000\000\054\255\255\002\
\000\000\062\255\000\000\247\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\221\002\207\000\000\000\221\002\
\221\002\221\002\029\003\000\000\221\002\221\002\000\000\075\255\
\207\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\157\016\150\000\000\000\000\000\244\016\000\000\218\006\074\007\
\116\018\070\019\130\020\042\021\154\021\010\022\122\022\235\007\
\135\002\000\000\000\000\000\000\001\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\084\255\000\000\109\003\
\207\000\000\000\000\000\063\000\194\000\000\000\000\000\000\000\
\000\000\094\004\000\000\000\000\000\000\037\255\000\000\000\000\
\000\000\139\255\002\003\000\000\000\000\000\000\000\000\003\003\
\000\000\000\000\000\000\247\002\247\002\000\000\221\002\000\000\
\000\000\221\002\057\001\251\002\000\000\000\000\000\000\000\000\
\000\000\000\000\221\002\000\000\000\000\000\000\221\002\000\000\
\077\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\003\209\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\003\000\000\000\000\000\000\000\000\000\000\004\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\130\024\165\024\233\024\010\025\041\015\045\025\
\078\025\113\025\136\025\159\025\117\010\187\010\174\013\200\005\
\028\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\003\000\000\000\000\207\000\011\015\114\008\000\000\000\000\
\222\002\075\001\000\000\252\002\000\000\000\000\014\003\000\000\
\207\000\103\255\000\000\071\000\028\001\015\000\000\000\000\000\
\255\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\247\002\000\000\000\000\000\000\000\000\207\000\221\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\232\017\046\018\
\186\018\000\019\135\019\200\019\009\020\074\020\186\020\242\020\
\098\021\210\021\066\022\178\022\132\008\000\000\000\000\000\000\
\000\000\000\000\029\024\062\024\000\000\000\000\000\000\000\000\
\239\025\000\000\000\000\000\000\016\003\000\000\235\011\000\000\
\000\000\000\000\000\000\000\000\000\000\015\003\000\000\000\000\
\000\000\000\000\230\003\000\000\153\000\029\026\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\003\000\000\014\003\000\000\014\003\
\000\000\000\000\014\003\000\000\021\003\000\000\000\000\000\000\
\070\000\000\000\000\000\222\002\015\003\000\000\000\000\000\000\
\000\000\089\001\000\000\000\000\000\000\000\000\075\017\162\017\
\000\000\000\000\000\000\012\003\000\000\000\000\000\000\000\000\
\000\000\191\000\000\000\000\000\000\000\000\000\000\000\075\255\
\000\000\019\011\000\000\012\003\000\000\000\000\000\000\000\000\
\000\000\000\000\122\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\141\006\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\026\
\000\000\024\003\000\000\000\000\025\003\025\003\000\000\000\000\
\000\000\000\000\000\000\000\000\207\000\037\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\011\000\000\
\000\000\000\000\000\000\000\000\000\000\188\002\000\000\000\000\
\109\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\109\007\000\000\000\000\000\000\024\003\214\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\253\255\040\003\000\000\000\000\000\000\000\000\050\003\
\000\000\000\000\000\000\101\255\000\000\000\000\000\000\000\000\
\053\003\041\000\000\000\000\000\000\000\000\000\000\000\101\255\
\000\000\161\255\000\000\000\000\000\000\000\000\054\003\000\000\
\000\000\000\000\000\000\000\000\000\000\059\003\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\129\004\234\255\012\004\002\255\202\002\037\000\148\254\
\000\000\233\255\168\255\126\253\241\254\188\255\018\254\000\000\
\227\001\000\000\000\000\000\000\000\000\185\253\215\001\017\000\
\000\000\106\000\000\000\117\255\098\003\153\255\182\255\000\000\
\000\000\085\255\207\255\165\255\104\002\109\002\229\254\000\000\
\136\003\224\255\000\000\201\002\025\004\000\000\000\000\206\255\
\109\255\232\255\126\255\000\000\005\000\218\253\039\000\235\254\
\000\000\000\000\000\000\191\253\159\001\112\001\068\001\076\001\
\069\001\096\001\032\003\035\003\036\003\034\003\039\003\000\000\
\082\002\074\003\113\253\196\255\000\000\000\000\110\002\000\000\
\000\000\211\255\000\000\008\002\216\001\000\000\134\002\000\000\
\236\255\253\000\255\255\090\254\005\003\000\000\039\002\007\255\
\048\004\000\000\032\000\000\000\000\000\000\000\204\000\011\002\
\022\002\001\002\019\002\196\003\197\003\195\003\199\003\201\003\
\000\000\254\254\110\255\000\000\201\001\000\000\000\000\206\001\
\000\000\000\000\193\001"

let yytablesize = 7022
let yytable = "\079\000\
\142\000\207\000\057\000\042\001\178\000\053\000\053\000\086\000\
\200\001\032\001\039\001\187\001\178\001\135\000\108\000\003\000\
\158\000\046\000\046\000\179\000\003\000\137\000\129\000\204\002\
\003\000\183\001\056\002\203\000\096\001\188\001\216\001\217\001\
\071\000\075\001\053\000\194\001\018\001\017\001\140\000\071\000\
\071\000\005\000\173\002\071\000\071\000\046\001\046\000\234\000\
\071\000\053\000\181\002\046\001\064\000\068\000\025\001\074\000\
\052\001\053\001\185\002\042\001\025\001\046\000\042\001\138\000\
\152\001\182\000\153\001\108\000\071\000\109\000\071\000\231\000\
\029\000\151\000\006\000\237\002\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\203\000\025\001\148\002\071\000\143\002\
\151\002\195\001\025\001\155\002\187\002\058\000\191\002\177\000\
\076\000\103\001\203\000\059\000\041\001\046\001\041\001\162\000\
\203\000\076\000\210\000\171\000\153\001\023\001\018\001\181\002\
\141\000\175\000\018\001\046\001\046\001\255\002\040\001\046\001\
\248\000\018\001\084\002\046\001\011\001\025\001\043\001\215\002\
\025\001\053\000\022\003\095\001\011\001\042\001\251\000\056\000\
\031\000\246\000\022\003\026\001\251\000\046\000\232\000\144\002\
\073\001\026\001\203\000\003\000\104\001\035\000\097\001\036\000\
\087\000\072\001\025\001\025\001\108\000\249\000\025\001\105\001\
\209\001\053\002\025\001\235\001\046\001\236\001\151\000\095\001\
\153\001\095\001\089\000\145\001\130\000\025\001\237\001\090\000\
\041\001\145\001\172\000\130\000\053\000\169\002\091\000\245\001\
\246\001\106\001\097\001\125\000\097\001\077\000\078\000\054\002\
\046\000\131\000\186\001\018\001\097\002\126\000\077\000\078\000\
\194\001\153\001\153\001\025\001\127\000\089\002\218\001\091\002\
\108\000\030\001\026\001\194\001\063\000\026\001\210\001\128\000\
\210\000\030\001\032\001\153\002\235\002\058\000\250\000\251\000\
\220\001\239\002\144\000\059\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\073\001\114\002\252\000\058\000\210\000\182\001\210\000\033\002\
\034\002\059\000\026\001\023\001\147\000\153\001\153\001\023\001\
\023\001\244\001\095\001\069\000\095\001\075\000\056\001\006\000\
\157\000\064\001\065\001\066\001\006\000\095\001\069\001\070\001\
\006\000\130\000\042\002\159\001\154\000\097\001\058\000\097\001\
\157\001\158\001\129\002\119\002\059\000\183\002\060\000\198\002\
\097\001\184\002\201\002\252\001\255\001\057\001\207\002\240\000\
\241\000\242\000\243\000\244\000\245\000\043\002\201\001\222\002\
\159\000\014\001\058\000\058\000\151\000\061\000\163\000\046\001\
\059\000\059\000\143\001\141\001\067\000\046\001\025\001\046\001\
\015\001\141\001\062\000\031\002\025\001\046\001\223\002\205\000\
\205\000\144\001\113\001\230\002\063\000\046\001\205\000\046\001\
\003\000\035\001\233\002\061\000\058\000\046\001\180\000\210\000\
\186\001\210\000\059\000\172\002\130\000\012\001\046\001\073\000\
\062\000\046\001\210\000\064\001\160\000\116\002\186\002\146\001\
\239\001\064\001\063\000\210\000\210\000\146\001\169\000\046\001\
\057\001\058\001\108\000\108\000\080\002\061\000\061\000\046\001\
\173\000\249\002\235\000\161\000\170\000\098\002\046\001\145\001\
\205\000\254\002\062\000\062\000\038\001\025\001\046\001\146\001\
\025\001\046\001\249\001\250\001\247\000\063\000\205\000\205\000\
\060\002\013\003\205\000\051\002\205\000\205\000\205\000\232\001\
\219\001\157\002\010\001\221\001\158\002\174\000\011\001\146\001\
\085\002\023\001\106\002\107\002\227\001\023\001\203\000\203\000\
\230\001\063\000\063\000\238\001\064\001\013\001\046\001\023\001\
\023\001\023\001\139\002\239\001\018\001\025\001\046\001\229\002\
\058\000\048\001\174\002\175\002\025\001\042\001\059\000\205\000\
\160\001\161\001\162\001\083\002\092\002\188\002\058\000\025\001\
\239\001\151\000\123\002\063\000\059\000\025\001\038\001\177\000\
\026\001\186\001\191\000\191\000\028\001\025\001\042\001\048\002\
\025\001\006\000\064\001\023\001\028\001\048\001\006\000\203\000\
\126\001\253\000\254\000\255\000\149\002\126\001\126\001\126\001\
\126\001\133\002\160\002\027\001\162\002\203\000\203\000\164\002\
\033\001\203\000\035\001\203\000\203\000\203\000\146\002\199\002\
\237\000\239\000\200\002\080\002\036\001\080\002\025\001\028\001\
\080\002\025\001\088\002\048\001\005\000\038\001\108\000\048\001\
\048\001\001\000\002\000\186\001\126\001\204\001\025\001\138\000\
\133\002\156\002\000\001\001\001\138\000\138\000\138\000\135\002\
\180\002\037\001\005\000\186\001\019\001\186\001\203\000\020\001\
\021\001\002\001\003\001\029\000\129\001\130\001\083\001\084\001\
\085\001\086\001\087\001\088\001\126\001\127\001\128\001\063\000\
\051\002\130\000\019\001\131\001\132\001\020\001\021\001\048\001\
\043\001\029\000\008\001\009\001\054\001\063\000\025\001\137\001\
\138\001\100\002\048\001\195\002\044\001\023\001\095\001\205\002\
\122\002\047\001\083\002\046\001\083\002\031\002\048\001\083\002\
\051\001\106\001\067\001\080\001\082\001\055\001\177\000\228\002\
\177\000\179\002\048\001\177\000\091\001\092\001\211\001\154\000\
\048\001\048\001\048\001\031\000\151\000\063\001\048\001\234\002\
\004\001\005\001\006\001\007\001\068\001\208\002\209\002\193\002\
\035\000\071\001\036\000\077\001\053\000\078\001\210\000\210\000\
\124\001\031\000\089\001\191\001\085\002\124\001\245\000\245\000\
\046\000\031\002\124\001\124\001\124\001\124\001\035\000\124\001\
\036\000\048\001\048\002\201\001\048\001\072\000\176\002\048\001\
\048\001\048\001\191\000\191\000\098\001\083\000\099\001\240\002\
\084\000\085\000\048\002\100\001\005\000\088\000\046\001\046\001\
\101\001\023\001\177\000\102\001\193\002\133\001\134\001\135\001\
\136\001\124\001\107\001\031\002\139\001\193\002\201\001\140\001\
\021\003\145\000\141\001\146\000\019\001\250\002\142\001\020\001\
\021\001\210\002\211\002\029\000\015\002\016\002\229\000\229\000\
\229\000\019\002\020\002\021\002\022\002\229\000\017\002\018\002\
\229\000\229\000\229\000\229\000\229\000\229\000\229\000\147\001\
\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\
\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\
\023\002\024\002\090\002\148\001\011\003\011\002\012\002\013\002\
\014\002\014\002\014\002\014\002\014\002\014\002\014\002\014\002\
\014\002\014\002\014\002\014\002\014\002\014\002\014\002\229\000\
\150\001\005\000\151\001\031\000\167\001\168\001\169\001\170\001\
\108\001\109\001\163\001\164\001\154\001\229\000\229\000\156\001\
\035\000\229\000\036\000\229\000\229\000\229\000\005\000\165\001\
\166\001\019\001\171\001\172\001\020\001\021\001\110\001\111\001\
\029\000\112\001\155\001\179\001\113\001\180\001\181\001\229\000\
\229\000\195\001\229\000\196\001\198\001\203\001\019\001\214\001\
\213\001\020\001\021\001\215\001\229\000\029\000\229\000\222\001\
\218\000\218\000\218\000\224\001\229\000\223\001\229\000\218\000\
\225\001\226\001\218\000\218\000\218\000\218\000\218\000\218\000\
\218\000\233\001\218\000\218\000\218\000\218\000\218\000\218\000\
\218\000\218\000\218\000\218\000\218\000\218\000\218\000\218\000\
\218\000\218\000\228\001\234\001\189\001\125\001\240\001\190\001\
\031\000\109\002\125\001\229\001\247\001\231\001\241\001\125\001\
\125\001\125\001\125\001\242\001\125\001\035\000\243\001\036\000\
\248\001\218\000\035\002\036\002\039\002\031\000\038\002\191\001\
\040\002\037\002\055\002\103\002\093\002\058\002\059\002\218\000\
\218\000\087\002\035\000\218\000\036\000\218\000\218\000\218\000\
\086\000\095\002\096\002\101\002\102\002\104\002\125\001\105\002\
\113\002\115\002\125\002\110\002\111\002\147\002\112\002\117\002\
\108\002\218\000\218\000\239\001\218\000\118\002\146\001\120\002\
\086\000\121\002\124\002\086\000\086\000\127\002\218\000\086\000\
\218\000\128\002\224\000\224\000\224\000\130\002\218\000\131\002\
\218\000\224\000\136\002\141\002\224\000\224\000\224\000\224\000\
\224\000\224\000\224\000\046\001\224\000\224\000\224\000\224\000\
\224\000\224\000\224\000\224\000\224\000\224\000\224\000\224\000\
\224\000\224\000\224\000\224\000\140\002\086\000\142\002\086\000\
\150\002\154\002\086\000\086\000\086\000\086\000\086\000\163\002\
\161\002\167\002\165\002\166\002\171\002\189\002\190\002\046\001\
\203\002\216\002\194\002\224\000\196\002\014\002\202\002\086\000\
\212\002\217\002\218\002\220\002\219\002\221\002\225\002\232\002\
\226\002\224\000\224\000\241\002\086\000\224\000\086\000\224\000\
\224\000\224\000\005\000\236\002\238\002\244\002\245\002\247\002\
\246\002\252\002\046\001\248\002\000\003\046\001\005\003\006\003\
\046\001\046\001\046\001\224\000\224\000\007\003\224\000\008\003\
\010\003\012\003\019\001\014\003\017\003\020\001\021\001\018\003\
\224\000\029\000\224\000\024\003\219\000\219\000\219\000\025\003\
\224\000\026\003\224\000\219\000\004\001\237\000\219\000\219\000\
\219\000\219\000\219\000\219\000\219\000\006\000\219\000\219\000\
\219\000\219\000\219\000\219\000\219\000\219\000\219\000\219\000\
\219\000\219\000\219\000\219\000\219\000\219\000\189\000\021\000\
\090\002\113\001\113\001\190\001\016\001\006\001\132\001\129\001\
\243\000\159\000\134\000\022\000\036\001\113\001\113\001\113\001\
\006\000\113\001\113\001\136\000\121\000\219\000\152\000\113\001\
\119\000\031\000\141\000\191\001\113\001\113\001\113\001\113\001\
\138\001\113\001\021\001\219\000\219\000\136\000\035\000\219\000\
\036\000\219\000\219\000\219\000\046\001\046\001\143\001\046\001\
\046\001\046\001\046\001\046\001\046\001\046\001\118\001\118\001\
\136\000\118\001\118\001\151\001\155\001\219\000\219\000\118\001\
\219\000\157\001\055\000\113\001\118\001\118\001\118\001\118\001\
\016\001\118\001\219\000\057\002\219\000\227\002\046\001\046\001\
\046\001\212\001\219\000\224\002\219\000\115\001\116\001\117\001\
\118\001\119\001\120\001\121\001\122\001\123\001\124\001\125\001\
\184\001\029\001\138\002\046\001\046\001\046\001\137\002\099\002\
\046\001\046\001\025\002\118\001\046\001\046\001\026\002\028\002\
\027\002\046\001\046\001\046\001\046\001\029\002\046\001\046\001\
\046\001\046\001\046\001\046\001\000\002\001\002\002\002\003\002\
\004\002\005\002\006\002\007\002\008\002\009\002\010\002\178\002\
\231\002\251\002\170\002\213\002\050\001\173\001\175\001\174\001\
\015\003\046\001\046\001\176\001\046\001\094\002\177\001\016\003\
\046\001\046\001\027\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\001\046\001\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\000\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\157\000\157\000\157\000\000\000\
\000\000\157\000\157\000\000\000\000\000\157\000\157\000\000\000\
\000\000\000\000\157\000\157\000\000\000\157\000\157\000\157\000\
\000\000\000\000\000\000\157\000\000\000\000\000\000\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\000\000\000\000\000\000\157\000\157\000\
\157\000\157\000\157\000\157\000\000\000\157\000\000\000\000\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\000\000\000\000\000\000\157\000\157\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\000\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\150\000\150\000\150\000\000\000\
\000\000\150\000\150\000\000\000\000\000\150\000\150\000\000\000\
\000\000\000\000\150\000\150\000\000\000\150\000\150\000\150\000\
\000\000\000\000\000\000\150\000\000\000\000\000\000\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\000\000\000\000\000\000\150\000\150\000\
\150\000\150\000\150\000\150\000\000\000\150\000\000\000\000\000\
\000\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\000\000\000\000\000\000\150\000\150\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\000\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\164\000\164\000\164\000\000\000\
\000\000\164\000\164\000\000\000\000\000\164\000\164\000\000\000\
\000\000\000\000\164\000\164\000\000\000\164\000\164\000\164\000\
\000\000\000\000\000\000\164\000\000\000\000\000\000\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\000\000\000\000\000\000\164\000\164\000\
\164\000\164\000\164\000\164\000\000\000\164\000\000\000\000\000\
\000\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\000\000\000\000\000\000\164\000\164\000\061\002\062\002\005\000\
\184\000\185\000\186\000\187\000\006\000\076\000\188\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\070\000\024\000\025\000\026\000\027\000\028\000\029\000\189\000\
\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\191\000\192\000\193\000\000\000\
\000\000\194\000\195\000\000\000\000\000\196\000\197\000\000\000\
\000\000\000\000\198\000\199\000\000\000\200\000\000\000\141\000\
\000\000\000\000\000\000\063\002\000\000\000\000\000\000\064\002\
\065\002\066\002\067\002\068\002\069\002\070\002\071\002\072\002\
\073\002\074\002\075\002\000\000\000\000\000\000\031\000\032\000\
\076\002\034\000\077\000\078\000\000\000\201\000\000\000\000\000\
\000\000\202\000\203\000\035\000\077\002\036\000\037\000\038\000\
\000\000\000\000\000\000\041\000\204\000\093\001\183\000\005\000\
\184\000\185\000\186\000\187\000\006\000\076\000\188\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\070\000\024\000\025\000\026\000\027\000\028\000\029\000\189\000\
\190\000\122\001\122\001\000\000\000\000\000\000\000\000\122\001\
\000\000\000\000\000\000\000\000\122\001\122\001\122\001\122\001\
\000\000\122\001\000\000\000\000\191\000\192\000\193\000\000\000\
\000\000\194\000\195\000\000\000\000\000\196\000\197\000\000\000\
\123\001\123\001\198\000\199\000\000\000\200\000\123\001\141\000\
\000\000\000\000\000\000\123\001\123\001\123\001\123\001\000\000\
\123\001\000\000\000\000\122\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\032\000\
\000\000\034\000\077\000\078\000\000\000\201\000\000\000\000\000\
\000\000\202\000\203\000\035\000\000\000\036\000\000\000\000\000\
\000\000\000\000\123\001\041\000\204\000\251\001\183\000\005\000\
\184\000\185\000\186\000\187\000\006\000\076\000\188\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\070\000\024\000\025\000\026\000\027\000\028\000\029\000\189\000\
\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\191\000\192\000\193\000\000\000\
\000\000\194\000\195\000\000\000\000\000\196\000\197\000\000\000\
\000\000\000\000\198\000\199\000\000\000\200\000\000\000\000\000\
\000\000\000\000\000\000\000\000\056\001\056\001\000\000\056\001\
\056\001\056\001\056\001\000\000\056\001\056\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\032\000\
\000\000\034\000\077\000\078\000\000\000\201\000\000\000\000\000\
\000\000\202\000\203\000\035\000\000\000\036\000\056\001\056\001\
\000\000\000\000\000\000\041\000\204\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\001\056\001\056\001\000\000\000\000\
\056\001\056\001\000\000\000\000\056\001\056\001\000\000\000\000\
\000\000\056\001\056\001\000\000\056\001\155\000\056\001\000\000\
\000\000\000\000\056\001\058\000\000\000\000\000\056\001\056\001\
\056\001\056\001\056\001\056\001\056\001\056\001\056\001\056\001\
\056\001\056\001\000\000\000\000\000\000\000\000\000\000\056\001\
\000\000\056\001\056\001\058\000\056\001\000\000\058\000\058\000\
\056\001\056\001\058\000\056\001\061\002\152\002\000\000\184\000\
\185\000\186\000\187\000\056\001\076\000\188\000\000\000\000\000\
\000\000\000\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\000\000\058\000\058\000\
\058\000\000\000\058\000\058\000\058\000\058\000\189\000\190\000\
\058\000\000\000\058\000\000\000\000\000\058\000\058\000\058\000\
\058\000\058\000\058\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\191\000\192\000\193\000\000\000\000\000\
\194\000\195\000\058\000\000\000\196\000\197\000\000\000\000\000\
\000\000\198\000\199\000\000\000\200\000\000\000\141\000\058\000\
\000\000\058\000\063\002\062\000\000\000\000\000\064\002\065\002\
\066\002\067\002\068\002\069\002\070\002\071\002\072\002\073\002\
\074\002\075\002\000\000\000\000\000\000\000\000\000\000\076\002\
\000\000\077\000\078\000\062\000\201\000\000\000\062\000\062\000\
\202\000\203\000\062\000\077\002\056\001\056\001\000\000\056\001\
\056\001\056\001\056\001\204\000\056\001\056\001\000\000\000\000\
\000\000\000\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\000\000\000\000\000\000\000\000\062\000\062\000\
\062\000\000\000\062\000\062\000\062\000\062\000\056\001\056\001\
\062\000\000\000\062\000\000\000\000\000\062\000\062\000\062\000\
\062\000\062\000\062\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\001\056\001\056\001\000\000\000\000\
\056\001\056\001\062\000\000\000\056\001\056\001\000\000\000\000\
\000\000\056\001\056\001\000\000\056\001\000\000\056\001\062\000\
\000\000\062\000\056\001\000\000\000\000\000\000\056\001\056\001\
\056\001\056\001\056\001\056\001\056\001\056\001\056\001\056\001\
\056\001\056\001\000\000\000\000\000\000\000\000\000\000\056\001\
\000\000\056\001\056\001\000\000\056\001\000\000\000\000\000\000\
\056\001\056\001\041\002\056\001\184\000\185\000\186\000\187\000\
\059\000\076\000\188\000\056\001\000\000\116\001\116\001\116\001\
\000\000\116\001\116\001\000\000\084\000\000\000\000\000\116\001\
\000\000\000\000\000\000\000\000\116\001\116\001\116\001\116\001\
\000\000\116\001\000\000\189\000\190\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\084\000\000\000\000\000\084\000\
\084\000\042\002\000\000\084\000\000\000\000\000\000\000\000\000\
\191\000\192\000\193\000\000\000\000\000\194\000\195\000\000\000\
\000\000\196\000\197\000\116\001\000\000\000\000\198\000\199\000\
\000\000\200\000\000\000\185\001\043\002\251\001\183\000\000\000\
\184\000\185\000\186\000\187\000\084\000\076\000\188\000\000\000\
\000\000\084\000\000\000\084\000\000\000\000\000\084\000\084\000\
\084\000\084\000\084\000\084\000\000\000\000\000\077\000\078\000\
\000\000\201\000\000\000\000\000\000\000\202\000\203\000\189\000\
\190\000\000\000\000\000\084\000\000\000\000\000\000\000\000\000\
\204\000\063\000\000\000\000\000\000\000\000\000\000\000\000\000\
\084\000\000\000\084\000\000\000\191\000\192\000\193\000\000\000\
\000\000\194\000\195\000\000\000\000\000\196\000\197\000\000\000\
\000\000\000\000\198\000\199\000\000\000\200\000\000\000\000\000\
\000\000\046\001\046\001\145\002\046\001\046\001\046\001\046\001\
\000\000\046\001\046\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\000\000\000\000\000\
\000\000\000\000\077\000\078\000\000\000\201\000\000\000\000\000\
\000\000\202\000\203\000\046\001\046\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\204\000\085\000\000\000\000\000\
\085\000\085\000\000\000\000\000\085\000\000\000\000\000\000\000\
\046\001\046\001\046\001\000\000\000\000\046\001\046\001\000\000\
\000\000\046\001\046\001\000\000\000\000\000\000\046\001\046\001\
\000\000\046\001\000\000\000\000\000\000\046\001\251\001\183\000\
\000\000\184\000\185\000\186\000\187\000\085\000\076\000\188\000\
\000\000\000\000\085\000\000\000\085\000\000\000\000\000\085\000\
\085\000\085\000\085\000\085\000\085\000\000\000\046\001\046\001\
\000\000\046\001\000\000\000\000\000\000\046\001\046\001\000\000\
\189\000\190\000\000\000\000\000\085\000\000\000\000\000\000\000\
\046\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\000\000\000\085\000\000\000\191\000\192\000\193\000\
\000\000\000\000\194\000\195\000\000\000\000\000\196\000\197\000\
\000\000\000\000\000\000\198\000\199\000\000\000\200\000\000\000\
\000\000\000\000\254\001\183\000\000\000\184\000\185\000\186\000\
\187\000\000\000\076\000\188\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\000\078\000\000\000\201\000\000\000\
\000\000\000\000\202\000\203\000\189\000\190\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\204\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\191\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\196\000\197\000\000\000\000\000\000\000\198\000\
\199\000\000\000\200\000\000\000\000\000\000\000\132\002\183\000\
\000\000\184\000\185\000\186\000\187\000\000\000\076\000\188\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\078\000\000\000\201\000\000\000\000\000\000\000\202\000\203\000\
\189\000\190\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\204\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\191\000\192\000\193\000\
\000\000\000\000\194\000\195\000\000\000\000\000\196\000\197\000\
\000\000\000\000\000\000\198\000\199\000\000\000\200\000\000\000\
\000\000\000\000\197\002\183\000\000\000\184\000\185\000\186\000\
\187\000\000\000\076\000\188\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\000\078\000\000\000\201\000\000\000\
\000\000\000\000\202\000\203\000\189\000\190\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\204\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\191\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\196\000\197\000\000\000\000\000\000\000\198\000\
\199\000\000\000\200\000\000\000\000\000\000\000\020\003\183\000\
\000\000\184\000\185\000\186\000\187\000\000\000\076\000\188\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\078\000\000\000\201\000\000\000\000\000\000\000\202\000\203\000\
\189\000\190\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\204\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\191\000\192\000\193\000\
\000\000\120\001\194\000\195\000\120\001\120\001\196\000\197\000\
\000\000\000\000\120\001\198\000\199\000\000\000\200\000\120\001\
\120\001\120\001\120\001\000\000\120\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\000\078\000\000\000\201\000\000\000\
\000\000\000\000\202\000\203\000\000\000\000\000\120\001\000\000\
\000\000\000\000\000\000\000\000\000\000\204\000\183\000\005\000\
\184\000\185\000\186\000\187\000\006\000\076\000\188\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\070\000\024\000\025\000\026\000\027\000\028\000\029\000\189\000\
\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\191\000\192\000\193\000\000\000\
\000\000\194\000\195\000\000\000\000\000\196\000\197\000\000\000\
\000\000\000\000\198\000\199\000\000\000\200\000\000\000\000\000\
\000\000\117\001\117\001\117\001\000\000\117\001\117\001\000\000\
\000\000\000\000\000\000\117\001\000\000\000\000\000\000\000\000\
\117\001\117\001\117\001\117\001\000\000\117\001\031\000\032\000\
\000\000\034\000\077\000\078\000\000\000\201\000\000\000\000\000\
\000\000\202\000\203\000\035\000\000\000\036\000\164\000\000\000\
\005\000\000\000\000\000\041\000\204\000\006\000\000\000\000\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\117\001\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\070\000\024\000\025\000\026\000\027\000\028\000\029\000\
\119\001\119\001\000\000\119\001\119\001\000\000\000\000\000\000\
\000\000\119\001\000\000\000\000\000\000\000\000\119\001\119\001\
\119\001\119\001\000\000\119\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\131\000\000\000\131\000\131\000\131\000\
\131\000\000\000\131\000\131\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\165\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\119\001\000\000\000\000\
\000\000\000\000\000\000\000\000\131\000\131\000\131\000\031\000\
\032\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\036\000\037\000\
\038\000\131\000\131\000\131\000\041\000\000\000\131\000\131\000\
\000\000\000\000\131\000\131\000\000\000\000\000\000\000\131\000\
\131\000\000\000\131\000\183\000\131\000\184\000\185\000\186\000\
\187\000\000\000\076\000\188\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\000\
\131\000\000\000\131\000\000\000\189\000\190\000\131\000\131\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\191\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\196\000\197\000\000\000\000\000\000\000\198\000\
\199\000\000\000\200\000\183\000\185\001\184\000\185\000\186\000\
\187\000\000\000\076\000\188\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\078\000\000\000\201\000\000\000\189\000\190\000\202\000\203\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\204\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\191\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\196\000\197\000\000\000\000\000\000\000\198\000\
\199\000\000\000\200\000\127\000\108\002\127\000\127\000\127\000\
\127\000\000\000\127\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\078\000\000\000\201\000\000\000\127\000\127\000\202\000\203\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\204\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\127\000\127\000\127\000\000\000\000\000\127\000\127\000\
\000\000\000\000\127\000\127\000\000\000\000\000\000\000\127\000\
\127\000\000\000\127\000\183\000\127\000\184\000\185\000\186\000\
\187\000\000\000\076\000\188\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\183\000\000\000\
\184\000\185\000\186\000\187\000\000\000\076\000\188\000\127\000\
\127\000\000\000\127\000\000\000\189\000\190\000\127\000\127\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\127\000\000\000\000\000\000\000\000\000\000\000\189\000\
\190\000\191\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\196\000\197\000\000\000\000\000\000\000\198\000\
\199\000\000\000\236\000\000\000\191\000\192\000\193\000\000\000\
\000\000\194\000\195\000\000\000\000\000\196\000\197\000\000\000\
\000\000\000\000\198\000\199\000\000\000\238\000\183\000\000\000\
\184\000\185\000\186\000\187\000\000\000\076\000\188\000\077\000\
\078\000\000\000\201\000\000\000\000\000\000\000\202\000\203\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\204\000\077\000\078\000\000\000\201\000\000\000\189\000\
\190\000\202\000\203\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\204\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\191\000\192\000\193\000\000\000\
\000\000\194\000\195\000\000\000\000\000\196\000\197\000\000\000\
\000\000\000\000\198\000\199\000\000\000\200\000\183\000\000\000\
\184\000\185\000\186\000\187\000\000\000\076\000\188\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\183\000\000\000\184\000\185\000\186\000\187\000\000\000\
\076\000\188\000\077\000\078\000\000\000\201\000\000\000\189\000\
\190\000\202\000\203\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\204\000\000\000\000\000\000\000\
\000\000\000\000\189\000\190\000\191\000\192\000\193\000\000\000\
\000\000\194\000\195\000\000\000\000\000\196\000\197\000\000\000\
\000\000\000\000\198\000\199\000\000\000\079\001\000\000\191\000\
\192\000\193\000\000\000\000\000\194\000\195\000\000\000\000\000\
\196\000\197\000\000\000\000\000\000\000\198\000\199\000\000\000\
\081\001\183\000\000\000\184\000\185\000\186\000\187\000\000\000\
\076\000\188\000\077\000\078\000\000\000\201\000\000\000\000\000\
\000\000\202\000\203\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\204\000\077\000\078\000\000\000\
\201\000\000\000\189\000\190\000\202\000\203\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\204\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\191\000\
\192\000\193\000\000\000\000\000\194\000\195\000\000\000\000\000\
\196\000\197\000\000\000\004\000\005\000\198\000\199\000\000\000\
\090\001\006\000\000\000\000\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\000\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\000\000\077\000\078\000\000\000\
\201\000\000\000\000\000\000\000\202\000\203\000\000\000\004\000\
\005\000\000\000\000\000\000\000\000\000\006\000\000\000\204\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\000\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\108\001\108\001\108\001\108\001\108\001\108\001\000\000\
\000\000\000\000\000\000\000\000\000\000\108\001\108\001\108\001\
\000\000\108\001\108\001\031\000\032\000\033\000\034\000\108\001\
\000\000\000\000\000\000\000\000\108\001\108\001\108\001\108\001\
\035\000\108\001\036\000\037\000\038\000\000\000\039\000\040\000\
\041\000\000\000\000\000\121\001\000\000\000\000\121\001\121\001\
\000\000\000\000\000\000\000\000\121\001\000\000\000\000\000\000\
\000\000\121\001\121\001\121\001\121\001\000\000\121\001\031\000\
\032\000\033\000\034\000\108\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\036\000\037\000\
\038\000\107\000\039\000\040\000\041\000\000\000\107\000\000\000\
\000\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\121\001\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\000\000\000\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\000\000\107\000\107\000\107\000\000\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\107\000\107\000\000\000\107\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\107\000\005\000\107\000\
\000\000\000\000\107\000\006\000\076\000\107\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\000\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\070\000\
\024\000\025\000\026\000\027\000\028\000\029\000\000\000\005\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\070\000\024\000\025\000\026\000\027\000\028\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\032\000\000\000\
\034\000\077\000\078\000\000\000\000\000\150\000\000\000\000\000\
\000\000\000\000\035\000\000\000\036\000\208\001\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\032\000\
\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\000\003\001\036\000\000\000\000\000\
\000\000\003\001\000\000\041\000\003\001\003\001\003\001\003\001\
\003\001\003\001\003\001\000\000\003\001\003\001\003\001\003\001\
\003\001\003\001\003\001\003\001\003\001\003\001\003\001\003\001\
\003\001\003\001\003\001\003\001\005\000\000\000\000\000\000\000\
\000\000\006\000\000\000\000\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\000\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\070\000\024\000\025\000\
\026\000\027\000\028\000\029\000\000\000\000\000\000\000\000\000\
\000\000\003\001\003\001\000\000\000\000\000\000\000\000\000\000\
\000\000\109\001\109\001\109\001\109\001\109\001\109\001\000\000\
\000\000\000\000\000\000\000\000\000\000\109\001\109\001\109\001\
\000\000\109\001\109\001\003\001\003\001\000\000\003\001\109\001\
\000\000\000\000\150\000\000\000\109\001\109\001\109\001\109\001\
\003\001\109\001\003\001\000\000\000\000\000\000\000\000\000\000\
\003\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\032\000\000\000\034\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\005\000\036\000\109\001\000\000\000\000\006\000\000\000\
\041\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\000\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\070\000\024\000\025\000\026\000\027\000\028\000\
\029\000\000\000\005\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\000\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\070\000\024\000\025\000\026\000\027\000\
\028\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\176\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\032\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\036\000\
\214\002\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\031\000\032\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\005\000\
\036\000\000\000\000\000\000\000\006\000\000\000\041\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\070\000\024\000\025\000\026\000\027\000\028\000\029\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\070\000\024\000\025\000\026\000\027\000\028\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\001\069\001\069\001\069\001\069\001\069\001\069\001\069\001\
\069\001\069\001\069\001\069\001\069\001\000\000\069\001\069\001\
\069\001\000\000\069\001\069\001\069\001\069\001\031\000\032\000\
\069\001\034\000\000\000\000\000\069\001\069\001\069\001\069\001\
\069\001\000\000\069\001\035\000\000\000\036\000\000\000\000\000\
\000\000\000\000\000\000\041\000\000\000\000\000\106\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\032\000\
\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\000\069\001\036\000\106\000\000\000\
\000\000\106\000\106\000\041\000\000\000\106\000\000\000\000\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\000\000\106\000\106\000\106\000\000\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\000\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\106\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\106\000\000\000\106\000\042\000\000\000\106\000\
\042\000\042\000\000\000\000\000\042\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
\042\000\042\000\042\000\000\000\042\000\042\000\042\000\042\000\
\000\000\000\000\042\000\000\000\042\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\000\000\042\000\046\000\000\000\042\000\046\000\
\046\000\000\000\000\000\046\000\000\000\000\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\000\000\046\000\
\046\000\046\000\000\000\046\000\046\000\046\000\046\000\000\000\
\000\000\046\000\000\000\046\000\000\000\000\000\046\000\046\000\
\046\000\046\000\046\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\046\000\048\000\000\000\046\000\048\000\048\000\
\000\000\000\000\048\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\000\000\048\000\048\000\
\048\000\000\000\048\000\048\000\048\000\048\000\000\000\000\000\
\048\000\063\000\048\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\048\000\000\000\063\000\063\000\000\000\000\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\000\000\048\000\000\000\000\000\048\000\000\000\000\000\000\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\000\000\000\000\000\000\000\000\063\000\063\000\063\000\000\000\
\063\000\063\000\063\000\063\000\000\000\000\000\063\000\064\000\
\063\000\000\000\000\000\063\000\063\000\063\000\063\000\063\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\063\000\000\000\064\000\064\000\000\000\000\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\000\000\000\000\
\000\000\000\000\064\000\064\000\064\000\000\000\064\000\064\000\
\064\000\064\000\000\000\000\000\064\000\065\000\064\000\000\000\
\000\000\064\000\064\000\064\000\064\000\064\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\064\000\000\000\
\065\000\065\000\000\000\000\000\065\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\064\000\000\000\000\000\
\000\000\000\000\000\000\000\000\065\000\065\000\065\000\065\000\
\065\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\065\000\065\000\000\000\065\000\065\000\065\000\065\000\
\000\000\000\000\065\000\066\000\065\000\000\000\000\000\065\000\
\065\000\065\000\065\000\065\000\065\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\065\000\000\000\066\000\066\000\
\000\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\000\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\066\000\066\000\066\000\066\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\066\000\
\066\000\000\000\066\000\066\000\066\000\066\000\000\000\000\000\
\066\000\067\000\066\000\000\000\000\000\066\000\066\000\066\000\
\066\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\066\000\000\000\067\000\067\000\000\000\000\000\
\067\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\000\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\067\000\067\000\067\000\067\000\067\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\067\000\067\000\000\000\
\067\000\067\000\067\000\067\000\000\000\000\000\067\000\068\000\
\067\000\000\000\000\000\067\000\067\000\067\000\067\000\067\000\
\067\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\067\000\000\000\068\000\068\000\000\000\000\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\067\000\000\000\067\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\000\068\000\
\068\000\068\000\068\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\068\000\068\000\000\000\068\000\068\000\
\069\000\000\000\000\000\000\000\068\000\000\000\068\000\000\000\
\000\000\068\000\068\000\068\000\068\000\068\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\000\000\000\000\069\000\069\000\000\000\068\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\068\000\000\000\068\000\000\000\069\000\
\069\000\069\000\069\000\069\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\069\000\069\000\069\000\000\000\069\000\
\069\000\070\000\000\000\000\000\000\000\069\000\000\000\069\000\
\000\000\000\000\069\000\069\000\069\000\069\000\069\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\000\000\000\000\070\000\070\000\000\000\069\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\069\000\000\000\069\000\000\000\
\070\000\070\000\070\000\070\000\070\000\070\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\070\000\070\000\000\000\
\070\000\070\000\071\000\000\000\000\000\000\000\070\000\000\000\
\070\000\000\000\000\000\070\000\070\000\070\000\070\000\070\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\071\000\000\000\000\000\071\000\071\000\000\000\
\070\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\070\000\000\000\070\000\
\000\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
\000\000\000\000\000\000\000\000\000\000\071\000\071\000\071\000\
\000\000\071\000\071\000\072\000\000\000\000\000\000\000\071\000\
\000\000\071\000\000\000\000\000\071\000\071\000\071\000\071\000\
\071\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\000\000\000\000\000\072\000\072\000\
\000\000\071\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\071\000\000\000\
\071\000\000\000\072\000\072\000\072\000\072\000\072\000\072\000\
\000\000\000\000\000\000\073\000\000\000\000\000\072\000\072\000\
\072\000\000\000\072\000\072\000\000\000\000\000\000\000\000\000\
\072\000\000\000\072\000\000\000\000\000\072\000\072\000\072\000\
\072\000\072\000\072\000\073\000\000\000\000\000\073\000\073\000\
\000\000\000\000\073\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\073\000\073\000\000\000\000\000\000\000\072\000\
\000\000\072\000\000\000\074\000\000\000\000\000\073\000\073\000\
\073\000\000\000\073\000\073\000\000\000\000\000\000\000\000\000\
\073\000\000\000\073\000\000\000\000\000\073\000\073\000\073\000\
\073\000\073\000\073\000\074\000\000\000\000\000\074\000\074\000\
\000\000\000\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\073\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\074\000\000\000\000\000\000\000\073\000\
\000\000\073\000\000\000\075\000\000\000\000\000\074\000\074\000\
\074\000\000\000\074\000\074\000\000\000\000\000\000\000\000\000\
\074\000\000\000\074\000\000\000\000\000\074\000\074\000\074\000\
\074\000\074\000\074\000\075\000\000\000\000\000\075\000\075\000\
\000\000\000\000\075\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\075\000\000\000\000\000\000\000\074\000\
\000\000\074\000\000\000\076\000\000\000\000\000\075\000\075\000\
\075\000\000\000\075\000\075\000\000\000\000\000\000\000\000\000\
\075\000\000\000\075\000\000\000\000\000\075\000\075\000\075\000\
\075\000\075\000\075\000\076\000\000\000\000\000\076\000\076\000\
\000\000\000\000\076\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\000\000\075\000\000\000\077\000\000\000\000\000\076\000\076\000\
\076\000\000\000\076\000\076\000\000\000\000\000\000\000\000\000\
\076\000\000\000\076\000\000\000\000\000\076\000\076\000\076\000\
\076\000\076\000\076\000\077\000\000\000\000\000\077\000\077\000\
\000\000\000\000\077\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\076\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\
\000\000\076\000\000\000\078\000\000\000\000\000\077\000\077\000\
\077\000\000\000\077\000\077\000\000\000\000\000\000\000\000\000\
\077\000\000\000\077\000\000\000\000\000\077\000\077\000\077\000\
\077\000\077\000\077\000\078\000\000\000\000\000\078\000\078\000\
\000\000\000\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\077\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\000\000\077\000\000\000\079\000\000\000\000\000\000\000\078\000\
\078\000\000\000\078\000\078\000\000\000\000\000\000\000\000\000\
\078\000\000\000\078\000\000\000\000\000\078\000\078\000\078\000\
\078\000\078\000\078\000\079\000\000\000\000\000\079\000\079\000\
\000\000\000\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\078\000\
\000\000\078\000\000\000\080\000\000\000\000\000\000\000\079\000\
\079\000\000\000\079\000\079\000\000\000\000\000\000\000\000\000\
\079\000\000\000\079\000\000\000\000\000\079\000\079\000\079\000\
\079\000\079\000\079\000\080\000\000\000\000\000\080\000\080\000\
\000\000\000\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\000\000\079\000\000\000\081\000\000\000\000\000\000\000\080\000\
\000\000\000\000\080\000\080\000\000\000\000\000\000\000\000\000\
\080\000\000\000\080\000\000\000\000\000\080\000\080\000\080\000\
\080\000\080\000\080\000\081\000\000\000\000\000\081\000\081\000\
\000\000\000\000\081\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\080\000\
\000\000\080\000\000\000\082\000\000\000\000\000\000\000\081\000\
\000\000\000\000\081\000\081\000\000\000\000\000\000\000\000\000\
\081\000\000\000\081\000\000\000\000\000\081\000\081\000\081\000\
\081\000\081\000\081\000\082\000\000\000\000\000\082\000\082\000\
\000\000\000\000\082\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
\000\000\081\000\000\000\083\000\000\000\000\000\000\000\000\000\
\000\000\000\000\082\000\082\000\000\000\000\000\000\000\000\000\
\082\000\000\000\082\000\000\000\000\000\082\000\082\000\082\000\
\082\000\082\000\082\000\083\000\000\000\000\000\083\000\083\000\
\000\000\000\000\083\000\000\000\228\000\093\000\000\000\000\000\
\000\000\094\000\082\000\095\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
\000\000\082\000\000\000\000\000\000\000\000\000\096\000\000\000\
\000\000\097\000\083\000\083\000\000\000\000\000\098\000\099\000\
\083\000\000\000\083\000\000\000\000\000\083\000\083\000\083\000\
\083\000\083\000\083\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\100\000\101\000\102\000\228\000\093\000\
\103\000\104\000\083\000\094\000\105\000\095\000\076\000\000\000\
\000\000\000\000\000\000\149\001\106\000\000\000\000\000\083\000\
\000\000\083\000\000\000\000\000\000\000\000\000\000\000\000\000\
\096\000\000\000\000\000\097\000\107\000\000\000\000\000\000\000\
\098\000\099\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\077\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\100\000\101\000\102\000\
\074\001\093\000\103\000\104\000\000\000\094\000\105\000\095\000\
\076\000\000\000\000\000\000\000\000\000\000\000\106\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\096\000\000\000\000\000\097\000\107\000\000\000\
\000\000\000\000\098\000\099\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\000\078\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\000\
\101\000\102\000\032\002\093\000\103\000\104\000\000\000\094\000\
\105\000\095\000\076\000\000\000\000\000\000\000\000\000\000\000\
\106\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\096\000\000\000\000\000\097\000\
\107\000\000\000\000\000\000\000\098\000\099\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\077\000\078\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\100\000\101\000\102\000\000\000\093\000\103\000\104\000\
\000\000\094\000\105\000\095\000\076\000\000\000\000\000\000\000\
\000\000\000\000\106\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\096\000\000\000\
\000\000\097\000\107\000\000\000\000\000\000\000\098\000\099\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\078\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\100\000\101\000\102\000\000\000\000\000\
\103\000\104\000\000\000\000\000\105\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\106\000\000\000\000\000\073\001\
\073\001\073\001\073\001\073\001\073\001\073\001\073\001\073\001\
\073\001\073\001\073\001\073\001\107\000\073\001\073\001\073\001\
\000\000\073\001\073\001\073\001\073\001\000\000\000\000\073\001\
\000\000\077\000\078\000\073\001\073\001\000\000\073\001\073\001\
\000\000\073\001\086\001\086\001\086\001\086\001\086\001\086\001\
\086\001\086\001\086\001\086\001\086\001\000\000\086\001\086\001\
\086\001\000\000\086\001\086\001\086\001\086\001\000\000\000\000\
\086\001\000\000\000\000\000\000\000\000\086\001\086\001\086\001\
\086\001\000\000\086\001\073\001\000\000\088\001\088\001\088\001\
\088\001\088\001\088\001\088\001\088\001\088\001\088\001\088\001\
\000\000\088\001\088\001\088\001\000\000\088\001\088\001\088\001\
\088\001\000\000\000\000\088\001\000\000\000\000\000\000\000\000\
\088\001\088\001\088\001\088\001\086\001\088\001\090\001\090\001\
\090\001\090\001\090\001\090\001\090\001\090\001\090\001\090\001\
\090\001\000\000\090\001\090\001\090\001\000\000\090\001\090\001\
\090\001\090\001\000\000\000\000\090\001\000\000\000\000\000\000\
\000\000\090\001\090\001\090\001\090\001\000\000\090\001\088\001\
\000\000\102\001\102\001\102\001\102\001\102\001\102\001\102\001\
\102\001\000\000\000\000\000\000\000\000\102\001\102\001\102\001\
\000\000\102\001\102\001\102\001\102\001\000\000\000\000\102\001\
\000\000\000\000\000\000\000\000\102\001\102\001\102\001\102\001\
\090\001\102\001\103\001\103\001\103\001\103\001\103\001\103\001\
\103\001\103\001\000\000\000\000\000\000\000\000\103\001\103\001\
\103\001\000\000\103\001\103\001\103\001\103\001\000\000\000\000\
\103\001\000\000\000\000\000\000\000\000\103\001\103\001\103\001\
\103\001\000\000\103\001\102\001\000\000\104\001\104\001\104\001\
\104\001\104\001\104\001\104\001\104\001\000\000\000\000\000\000\
\000\000\104\001\104\001\104\001\000\000\104\001\104\001\104\001\
\104\001\000\000\000\000\104\001\000\000\000\000\000\000\000\000\
\104\001\104\001\104\001\104\001\103\001\104\001\105\001\105\001\
\105\001\105\001\105\001\105\001\000\000\000\000\000\000\000\000\
\000\000\000\000\105\001\105\001\105\001\000\000\105\001\105\001\
\105\001\105\001\000\000\000\000\105\001\000\000\000\000\000\000\
\000\000\105\001\105\001\105\001\105\001\000\000\105\001\104\001\
\000\000\106\001\106\001\106\001\106\001\106\001\106\001\000\000\
\000\000\000\000\000\000\000\000\000\000\106\001\106\001\106\001\
\000\000\106\001\106\001\106\001\106\001\000\000\000\000\106\001\
\000\000\000\000\000\000\000\000\106\001\106\001\106\001\106\001\
\105\001\106\001\107\001\107\001\107\001\107\001\107\001\107\001\
\000\000\000\000\000\000\000\000\000\000\000\000\107\001\107\001\
\107\001\000\000\107\001\107\001\107\001\107\001\000\000\000\000\
\107\001\000\000\000\000\000\000\000\000\107\001\107\001\107\001\
\107\001\000\000\107\001\106\001\000\000\110\001\110\001\110\001\
\110\001\110\001\110\001\000\000\000\000\000\000\000\000\000\000\
\000\000\110\001\110\001\110\001\000\000\110\001\110\001\000\000\
\000\000\000\000\000\000\110\001\000\000\000\000\000\000\000\000\
\110\001\110\001\110\001\110\001\107\001\110\001\111\001\111\001\
\111\001\111\001\111\001\111\001\000\000\000\000\000\000\000\000\
\000\000\000\000\111\001\111\001\111\001\000\000\111\001\111\001\
\000\000\000\000\000\000\000\000\111\001\000\000\000\000\000\000\
\000\000\111\001\111\001\111\001\111\001\000\000\111\001\110\001\
\000\000\112\001\112\001\112\001\112\001\112\001\112\001\000\000\
\000\000\000\000\000\000\000\000\000\000\112\001\112\001\112\001\
\000\000\112\001\112\001\000\000\000\000\000\000\000\000\112\001\
\114\001\114\001\000\000\000\000\112\001\112\001\112\001\112\001\
\111\001\112\001\000\000\000\000\114\001\114\001\114\001\000\000\
\114\001\114\001\000\000\000\000\000\000\000\000\114\001\115\001\
\115\001\000\000\000\000\114\001\114\001\114\001\114\001\000\000\
\114\001\000\000\000\000\115\001\115\001\115\001\000\000\115\001\
\115\001\000\000\000\000\112\001\000\000\115\001\000\000\000\000\
\000\000\000\000\115\001\115\001\115\001\115\001\000\000\115\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\114\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\115\001\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\000\000\023\000\023\000\023\000\000\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\023\000\023\000\
\000\000\023\000\000\000\018\000\000\000\023\000\000\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\023\000\023\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\023\000\000\000\000\000\023\000\
\000\000\000\000\023\000\023\000\000\000\023\000"

let yycheck = "\023\000\
\050\000\090\000\004\000\151\000\079\000\001\000\002\000\030\000\
\036\001\140\000\150\000\027\001\015\001\046\000\038\000\000\000\
\062\000\001\000\002\000\080\000\000\000\046\000\045\000\154\002\
\000\000\024\001\193\001\001\001\200\000\028\001\052\001\053\001\
\016\000\180\000\030\000\029\001\000\001\126\000\000\001\023\000\
\024\000\002\001\108\002\027\000\028\000\001\001\030\000\093\000\
\032\000\045\000\122\002\007\001\014\000\015\000\001\001\017\000\
\160\000\161\000\124\002\000\001\007\001\045\000\210\000\047\000\
\236\000\089\000\238\000\091\000\052\000\038\000\054\000\001\001\
\033\001\057\000\000\001\206\002\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\057\001\001\001\068\002\070\000\001\001\
\071\002\073\001\007\001\074\002\131\002\001\001\078\001\079\000\
\008\001\009\001\072\001\007\001\151\000\057\001\000\001\065\000\
\078\001\008\001\090\000\069\000\008\001\130\000\074\001\183\002\
\074\001\075\000\078\001\071\001\072\001\248\002\151\000\075\001\
\078\001\000\001\000\001\079\001\071\001\072\001\151\000\166\002\
\075\001\125\000\018\003\200\000\079\001\074\001\073\001\072\001\
\097\001\106\000\026\003\001\001\079\001\125\000\072\001\057\001\
\177\000\007\001\120\001\073\001\209\000\110\001\200\000\112\001\
\072\001\176\000\071\001\072\001\180\000\115\001\075\001\210\000\
\044\001\189\001\079\001\079\001\120\001\081\001\150\000\236\000\
\008\001\238\000\072\001\071\001\057\001\120\001\090\001\072\001\
\074\001\077\001\073\000\057\001\176\000\092\002\072\001\099\001\
\100\001\210\000\236\000\074\001\238\000\101\001\102\001\190\001\
\176\000\078\001\027\001\074\001\218\001\074\001\101\001\102\001\
\194\001\101\001\102\001\120\001\072\001\204\001\054\001\206\001\
\232\000\071\001\072\001\205\001\120\001\075\001\047\001\000\000\
\200\000\079\001\093\001\072\002\203\002\001\001\047\001\048\001\
\057\001\208\002\000\001\007\001\252\000\253\000\254\000\255\000\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\025\001\248\001\075\001\001\001\236\000\022\001\238\000\146\001\
\147\001\007\001\120\001\024\001\001\001\101\001\102\001\028\001\
\029\001\098\001\079\001\015\000\081\001\017\000\165\000\000\001\
\072\001\168\000\169\000\170\000\000\001\090\001\173\000\174\000\
\000\001\057\001\048\001\252\000\001\001\079\001\001\001\081\001\
\250\000\251\000\050\002\038\002\007\001\076\001\074\001\148\002\
\090\001\080\001\151\002\112\001\113\001\077\001\155\002\100\000\
\101\000\102\000\103\000\104\000\105\000\075\001\038\001\048\001\
\072\001\066\001\001\001\001\001\044\001\097\001\066\000\001\001\
\007\001\007\001\066\001\071\001\074\001\007\001\001\001\001\001\
\081\001\077\001\110\001\144\001\007\001\007\001\071\001\000\001\
\001\001\081\001\075\001\192\002\120\001\071\001\007\001\057\001\
\073\001\075\001\199\002\097\001\001\001\079\001\072\001\079\001\
\185\001\081\001\007\001\098\002\057\001\062\001\072\001\074\001\
\110\001\075\001\090\001\001\001\074\001\076\001\126\002\071\001\
\079\001\007\001\120\001\099\001\100\001\077\001\074\001\057\001\
\077\001\078\001\146\001\147\001\199\001\097\001\097\001\057\001\
\074\001\238\002\077\001\074\001\074\001\222\001\072\001\071\001\
\057\001\246\002\110\001\110\001\000\001\072\001\072\001\079\001\
\075\001\075\001\108\001\109\001\077\001\120\001\071\001\072\001\
\198\001\006\003\075\001\188\001\077\001\078\001\079\001\071\001\
\055\001\026\001\061\001\058\001\029\001\074\001\063\001\079\001\
\201\001\190\001\239\001\240\001\067\001\194\001\000\001\001\001\
\071\001\120\001\120\001\071\001\074\001\065\001\120\001\204\001\
\205\001\206\001\061\002\079\001\001\001\120\001\120\001\190\002\
\001\001\000\001\110\002\111\002\079\001\089\002\007\001\120\001\
\253\000\254\000\255\000\199\001\206\001\076\001\001\001\001\001\
\079\001\193\001\043\002\120\001\007\001\007\001\074\001\199\001\
\078\001\050\002\078\001\079\001\071\001\072\001\114\002\185\001\
\075\001\073\001\120\001\248\001\079\001\036\001\078\001\057\001\
\071\001\057\001\058\001\059\001\069\002\076\001\077\001\078\001\
\079\001\054\002\078\002\036\001\080\002\071\001\072\001\083\002\
\103\001\075\001\078\001\077\001\078\001\079\001\067\002\077\001\
\098\000\099\000\080\001\078\002\079\001\080\002\072\001\072\001\
\083\002\075\001\000\001\074\001\002\001\071\001\038\002\078\001\
\079\001\001\000\002\000\108\002\115\001\072\001\072\001\071\001\
\093\002\075\002\055\001\056\001\076\001\077\001\078\001\055\002\
\121\002\078\001\002\001\124\002\026\001\126\002\120\001\029\001\
\030\001\067\001\068\001\033\001\055\001\056\001\191\000\192\000\
\193\000\194\000\195\000\196\000\057\001\058\001\059\001\120\001\
\089\002\057\001\026\001\067\001\068\001\029\001\030\001\036\001\
\089\002\033\001\049\001\050\001\074\001\120\001\120\001\049\001\
\050\001\224\001\000\001\144\002\079\001\098\002\147\002\154\002\
\042\002\036\001\078\002\071\001\080\002\154\002\079\001\083\002\
\001\001\114\002\074\001\189\000\190\000\078\001\078\002\184\002\
\080\002\120\002\071\001\083\002\198\000\199\000\000\001\001\001\
\077\001\078\001\079\001\097\001\092\002\073\001\036\001\200\002\
\051\001\052\001\053\001\054\001\073\001\094\001\095\001\140\002\
\110\001\074\001\112\001\071\001\120\002\071\001\110\002\111\002\
\066\001\097\001\001\001\099\001\165\002\071\001\078\001\079\001\
\120\002\206\002\076\001\077\001\078\001\079\001\110\001\081\001\
\112\001\071\001\108\002\131\002\074\001\016\000\112\002\077\001\
\078\001\079\001\078\001\079\001\072\001\024\000\072\001\209\002\
\027\000\028\000\124\002\072\001\002\001\032\000\078\001\079\001\
\072\001\190\002\154\002\071\001\193\002\051\001\052\001\053\001\
\054\001\115\001\071\001\248\002\061\001\202\002\166\002\063\001\
\017\003\052\000\062\001\054\000\026\001\239\002\065\001\029\001\
\030\001\157\002\158\002\033\001\129\001\130\001\000\001\001\001\
\002\001\133\001\134\001\135\001\136\001\007\001\131\001\132\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\079\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\137\001\138\001\072\001\071\001\004\003\126\001\127\001\128\001\
\129\001\130\001\131\001\132\001\133\001\134\001\135\001\136\001\
\137\001\138\001\139\001\140\001\141\001\142\001\143\001\057\001\
\005\001\002\001\005\001\097\001\004\001\005\001\006\001\007\001\
\047\001\048\001\000\001\001\001\071\001\071\001\072\001\115\001\
\110\001\075\001\112\001\077\001\078\001\079\001\002\001\002\001\
\003\001\026\001\008\001\009\001\029\001\030\001\069\001\070\001\
\033\001\072\001\005\001\073\001\075\001\073\001\071\001\097\001\
\098\001\073\001\100\001\001\001\107\001\071\001\026\001\071\001\
\073\001\029\001\030\001\071\001\110\001\033\001\112\001\077\001\
\000\001\001\001\002\001\078\001\118\001\079\001\120\001\007\001\
\073\001\073\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\071\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\073\001\078\001\072\001\066\001\079\001\075\001\
\097\001\242\001\071\001\073\001\001\001\073\001\071\001\076\001\
\077\001\078\001\079\001\071\001\081\001\110\001\071\001\112\001\
\072\001\057\001\071\001\071\001\001\001\097\001\077\001\099\001\
\001\001\076\001\072\001\071\001\075\001\079\001\078\001\071\001\
\072\001\078\001\110\001\075\001\112\001\077\001\078\001\079\001\
\002\001\073\001\073\001\073\001\073\001\071\001\115\001\071\001\
\071\001\071\001\036\001\079\001\079\001\072\001\079\001\076\001\
\074\001\097\001\098\001\079\001\100\001\077\001\079\001\074\001\
\026\001\074\001\079\001\029\001\030\001\077\001\110\001\033\001\
\112\001\073\001\000\001\001\001\002\001\071\001\118\001\071\001\
\120\001\007\001\071\001\078\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\000\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\077\001\071\001\078\001\073\001\
\077\001\072\001\076\001\077\001\078\001\079\001\080\001\073\001\
\078\001\071\001\079\001\078\001\073\001\076\001\071\001\036\001\
\089\001\071\001\078\001\057\001\078\001\118\002\077\001\097\001\
\072\001\071\001\076\001\071\001\073\001\071\001\073\001\078\001\
\073\001\071\001\072\001\008\001\110\001\075\001\112\001\077\001\
\078\001\079\001\002\001\078\001\096\001\001\001\076\001\078\001\
\077\001\077\001\071\001\078\001\075\001\074\001\071\001\071\001\
\077\001\078\001\079\001\097\001\098\001\001\001\100\001\077\001\
\079\001\078\001\026\001\076\001\072\001\029\001\030\001\077\001\
\110\001\033\001\112\001\071\001\000\001\001\001\002\001\071\001\
\118\001\079\001\120\001\007\001\071\001\073\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\000\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\078\001\073\001\
\072\001\049\001\050\001\075\001\071\001\071\001\071\001\071\001\
\078\001\078\001\071\001\073\001\075\001\061\001\062\001\063\001\
\073\001\065\001\066\001\077\001\073\001\057\001\073\001\071\001\
\073\001\097\001\076\001\099\001\076\001\077\001\078\001\079\001\
\072\001\081\001\078\001\071\001\072\001\078\001\110\001\075\001\
\112\001\077\001\078\001\079\001\000\001\001\001\071\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\062\001\063\001\
\071\001\065\001\066\001\071\001\071\001\097\001\098\001\071\001\
\100\001\071\001\002\000\115\001\076\001\077\001\078\001\079\001\
\125\000\081\001\110\001\194\001\112\001\183\002\034\001\035\001\
\036\001\048\001\118\001\177\002\120\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\025\001\137\000\059\002\055\001\056\001\057\001\058\002\223\001\
\060\001\061\001\139\001\115\001\064\001\065\001\140\001\142\001\
\141\001\069\001\070\001\071\001\072\001\143\001\074\001\075\001\
\076\001\077\001\078\001\079\001\115\001\116\001\117\001\118\001\
\119\001\120\001\121\001\122\001\123\001\124\001\125\001\118\002\
\193\002\242\002\093\002\165\002\157\000\010\001\012\001\011\001\
\008\003\101\001\102\001\013\001\104\001\209\001\014\001\010\003\
\108\001\109\001\026\003\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\119\001\120\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\073\001\074\001\
\255\255\255\255\255\255\078\001\255\255\255\255\255\255\082\001\
\083\001\084\001\085\001\086\001\087\001\088\001\089\001\090\001\
\091\001\092\001\093\001\255\255\255\255\255\255\097\001\098\001\
\099\001\100\001\101\001\102\001\255\255\104\001\255\255\255\255\
\107\001\108\001\109\001\110\001\111\001\112\001\113\001\114\001\
\255\255\255\255\255\255\118\001\119\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\073\001\074\001\
\255\255\255\255\255\255\078\001\255\255\255\255\255\255\082\001\
\083\001\084\001\085\001\086\001\087\001\088\001\089\001\090\001\
\091\001\092\001\093\001\255\255\255\255\255\255\097\001\098\001\
\099\001\100\001\101\001\102\001\255\255\104\001\255\255\255\255\
\255\255\108\001\109\001\110\001\111\001\112\001\113\001\114\001\
\255\255\255\255\255\255\118\001\119\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\073\001\074\001\
\255\255\255\255\255\255\078\001\255\255\255\255\255\255\082\001\
\083\001\084\001\085\001\086\001\087\001\088\001\089\001\090\001\
\091\001\092\001\093\001\255\255\255\255\255\255\097\001\098\001\
\099\001\100\001\101\001\102\001\255\255\104\001\255\255\255\255\
\255\255\108\001\109\001\110\001\111\001\112\001\113\001\114\001\
\255\255\255\255\255\255\118\001\119\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\255\255\074\001\
\255\255\255\255\255\255\078\001\255\255\255\255\255\255\082\001\
\083\001\084\001\085\001\086\001\087\001\088\001\089\001\090\001\
\091\001\092\001\093\001\255\255\255\255\255\255\097\001\098\001\
\099\001\100\001\101\001\102\001\255\255\104\001\255\255\255\255\
\255\255\108\001\109\001\110\001\111\001\112\001\113\001\114\001\
\255\255\255\255\255\255\118\001\119\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\065\001\066\001\255\255\255\255\255\255\255\255\071\001\
\255\255\255\255\255\255\255\255\076\001\077\001\078\001\079\001\
\255\255\081\001\255\255\255\255\055\001\056\001\057\001\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\065\001\066\001\069\001\070\001\255\255\072\001\071\001\074\001\
\255\255\255\255\255\255\076\001\077\001\078\001\079\001\255\255\
\081\001\255\255\255\255\115\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\097\001\098\001\
\255\255\100\001\101\001\102\001\255\255\104\001\255\255\255\255\
\255\255\108\001\109\001\110\001\255\255\112\001\255\255\255\255\
\255\255\255\255\115\001\118\001\119\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\255\255\255\255\
\255\255\255\255\255\255\255\255\000\001\001\001\255\255\003\001\
\004\001\005\001\006\001\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\097\001\098\001\
\255\255\100\001\101\001\102\001\255\255\104\001\255\255\255\255\
\255\255\108\001\109\001\110\001\255\255\112\001\034\001\035\001\
\255\255\255\255\255\255\118\001\119\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\056\001\057\001\255\255\255\255\
\060\001\061\001\255\255\255\255\064\001\065\001\255\255\255\255\
\255\255\069\001\070\001\255\255\072\001\073\001\074\001\255\255\
\255\255\255\255\078\001\002\001\255\255\255\255\082\001\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\090\001\091\001\
\092\001\093\001\255\255\255\255\255\255\255\255\255\255\099\001\
\255\255\101\001\102\001\026\001\104\001\255\255\029\001\030\001\
\108\001\109\001\033\001\111\001\000\001\001\001\255\255\003\001\
\004\001\005\001\006\001\119\001\008\001\009\001\255\255\255\255\
\255\255\255\255\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\067\001\068\001\034\001\035\001\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\056\001\057\001\255\255\255\255\
\060\001\061\001\097\001\255\255\064\001\065\001\255\255\255\255\
\255\255\069\001\070\001\255\255\072\001\255\255\074\001\110\001\
\255\255\112\001\078\001\002\001\255\255\255\255\082\001\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\090\001\091\001\
\092\001\093\001\255\255\255\255\255\255\255\255\255\255\099\001\
\255\255\101\001\102\001\026\001\104\001\255\255\029\001\030\001\
\108\001\109\001\033\001\111\001\000\001\001\001\255\255\003\001\
\004\001\005\001\006\001\119\001\008\001\009\001\255\255\255\255\
\255\255\255\255\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\255\255\255\255\255\255\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\067\001\068\001\034\001\035\001\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\056\001\057\001\255\255\255\255\
\060\001\061\001\097\001\255\255\064\001\065\001\255\255\255\255\
\255\255\069\001\070\001\255\255\072\001\255\255\074\001\110\001\
\255\255\112\001\078\001\255\255\255\255\255\255\082\001\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\090\001\091\001\
\092\001\093\001\255\255\255\255\255\255\255\255\255\255\099\001\
\255\255\101\001\102\001\255\255\104\001\255\255\255\255\255\255\
\108\001\109\001\001\001\111\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\119\001\255\255\061\001\062\001\063\001\
\255\255\065\001\066\001\255\255\002\001\255\255\255\255\071\001\
\255\255\255\255\255\255\255\255\076\001\077\001\078\001\079\001\
\255\255\081\001\255\255\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\255\255\029\001\
\030\001\048\001\255\255\033\001\255\255\255\255\255\255\255\255\
\055\001\056\001\057\001\255\255\255\255\060\001\061\001\255\255\
\255\255\064\001\065\001\115\001\255\255\255\255\069\001\070\001\
\255\255\072\001\255\255\074\001\075\001\000\001\001\001\255\255\
\003\001\004\001\005\001\006\001\066\001\008\001\009\001\255\255\
\255\255\071\001\255\255\073\001\255\255\255\255\076\001\077\001\
\078\001\079\001\080\001\081\001\255\255\255\255\101\001\102\001\
\255\255\104\001\255\255\255\255\255\255\108\001\109\001\034\001\
\035\001\255\255\255\255\097\001\255\255\255\255\255\255\255\255\
\119\001\120\001\255\255\255\255\255\255\255\255\255\255\255\255\
\110\001\255\255\112\001\255\255\055\001\056\001\057\001\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\255\255\255\255\
\255\255\000\001\001\001\078\001\003\001\004\001\005\001\006\001\
\255\255\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\255\255\
\255\255\255\255\101\001\102\001\255\255\104\001\255\255\255\255\
\255\255\108\001\109\001\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\119\001\026\001\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\255\255\255\255\255\255\
\055\001\056\001\057\001\255\255\255\255\060\001\061\001\255\255\
\255\255\064\001\065\001\255\255\255\255\255\255\069\001\070\001\
\255\255\072\001\255\255\255\255\255\255\076\001\000\001\001\001\
\255\255\003\001\004\001\005\001\006\001\066\001\008\001\009\001\
\255\255\255\255\071\001\255\255\073\001\255\255\255\255\076\001\
\077\001\078\001\079\001\080\001\081\001\255\255\101\001\102\001\
\255\255\104\001\255\255\255\255\255\255\108\001\109\001\255\255\
\034\001\035\001\255\255\255\255\097\001\255\255\255\255\255\255\
\119\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\110\001\255\255\112\001\255\255\055\001\056\001\057\001\
\255\255\255\255\060\001\061\001\255\255\255\255\064\001\065\001\
\255\255\255\255\255\255\069\001\070\001\255\255\072\001\255\255\
\255\255\255\255\000\001\001\001\255\255\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\101\001\102\001\255\255\104\001\255\255\
\255\255\255\255\108\001\109\001\034\001\035\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\119\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\056\001\057\001\255\255\255\255\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\255\255\069\001\
\070\001\255\255\072\001\255\255\255\255\255\255\000\001\001\001\
\255\255\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\101\001\
\102\001\255\255\104\001\255\255\255\255\255\255\108\001\109\001\
\034\001\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\119\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\055\001\056\001\057\001\
\255\255\255\255\060\001\061\001\255\255\255\255\064\001\065\001\
\255\255\255\255\255\255\069\001\070\001\255\255\072\001\255\255\
\255\255\255\255\000\001\001\001\255\255\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\101\001\102\001\255\255\104\001\255\255\
\255\255\255\255\108\001\109\001\034\001\035\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\119\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\056\001\057\001\255\255\255\255\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\255\255\069\001\
\070\001\255\255\072\001\255\255\255\255\255\255\000\001\001\001\
\255\255\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\101\001\
\102\001\255\255\104\001\255\255\255\255\255\255\108\001\109\001\
\034\001\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\119\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\055\001\056\001\057\001\
\255\255\062\001\060\001\061\001\065\001\066\001\064\001\065\001\
\255\255\255\255\071\001\069\001\070\001\255\255\072\001\076\001\
\077\001\078\001\079\001\255\255\081\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\101\001\102\001\255\255\104\001\255\255\
\255\255\255\255\108\001\109\001\255\255\255\255\115\001\255\255\
\255\255\255\255\255\255\255\255\255\255\119\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\255\255\255\255\
\255\255\061\001\062\001\063\001\255\255\065\001\066\001\255\255\
\255\255\255\255\255\255\071\001\255\255\255\255\255\255\255\255\
\076\001\077\001\078\001\079\001\255\255\081\001\097\001\098\001\
\255\255\100\001\101\001\102\001\255\255\104\001\255\255\255\255\
\255\255\108\001\109\001\110\001\255\255\112\001\000\001\255\255\
\002\001\255\255\255\255\118\001\119\001\007\001\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\115\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\062\001\063\001\255\255\065\001\066\001\255\255\255\255\255\255\
\255\255\071\001\255\255\255\255\255\255\255\255\076\001\077\001\
\078\001\079\001\255\255\081\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\255\255\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\115\001\255\255\255\255\
\255\255\255\255\255\255\255\255\034\001\035\001\036\001\097\001\
\098\001\255\255\100\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\110\001\255\255\112\001\113\001\
\114\001\055\001\056\001\057\001\118\001\255\255\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\255\255\069\001\
\070\001\255\255\072\001\001\001\074\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\101\001\
\102\001\255\255\104\001\255\255\034\001\035\001\108\001\109\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\119\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\056\001\057\001\255\255\255\255\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\255\255\069\001\
\070\001\255\255\072\001\001\001\074\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\101\001\
\102\001\255\255\104\001\255\255\034\001\035\001\108\001\109\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\119\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\056\001\057\001\255\255\255\255\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\255\255\069\001\
\070\001\255\255\072\001\001\001\074\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\101\001\
\102\001\255\255\104\001\255\255\034\001\035\001\108\001\109\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\119\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\056\001\057\001\255\255\255\255\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\255\255\069\001\
\070\001\255\255\072\001\001\001\074\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\004\001\005\001\006\001\255\255\008\001\009\001\101\001\
\102\001\255\255\104\001\255\255\034\001\035\001\108\001\109\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\119\001\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\055\001\056\001\057\001\255\255\255\255\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\255\255\069\001\
\070\001\255\255\072\001\255\255\055\001\056\001\057\001\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\001\001\255\255\
\003\001\004\001\005\001\006\001\255\255\008\001\009\001\101\001\
\102\001\255\255\104\001\255\255\255\255\255\255\108\001\109\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\119\001\101\001\102\001\255\255\104\001\255\255\034\001\
\035\001\108\001\109\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\119\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\001\001\255\255\
\003\001\004\001\005\001\006\001\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\004\001\005\001\006\001\255\255\
\008\001\009\001\101\001\102\001\255\255\104\001\255\255\034\001\
\035\001\108\001\109\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\119\001\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\055\001\056\001\057\001\255\255\
\255\255\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\255\255\055\001\
\056\001\057\001\255\255\255\255\060\001\061\001\255\255\255\255\
\064\001\065\001\255\255\255\255\255\255\069\001\070\001\255\255\
\072\001\001\001\255\255\003\001\004\001\005\001\006\001\255\255\
\008\001\009\001\101\001\102\001\255\255\104\001\255\255\255\255\
\255\255\108\001\109\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\119\001\101\001\102\001\255\255\
\104\001\255\255\034\001\035\001\108\001\109\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\119\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\056\001\057\001\255\255\255\255\060\001\061\001\255\255\255\255\
\064\001\065\001\255\255\001\001\002\001\069\001\070\001\255\255\
\072\001\007\001\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\101\001\102\001\255\255\
\104\001\255\255\255\255\255\255\108\001\109\001\255\255\001\001\
\002\001\255\255\255\255\255\255\255\255\007\001\255\255\119\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\078\001\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\062\001\063\001\
\255\255\065\001\066\001\097\001\098\001\099\001\100\001\071\001\
\255\255\255\255\255\255\255\255\076\001\077\001\078\001\079\001\
\110\001\081\001\112\001\113\001\114\001\255\255\116\001\117\001\
\118\001\255\255\255\255\062\001\255\255\255\255\065\001\066\001\
\255\255\255\255\255\255\255\255\071\001\255\255\255\255\255\255\
\255\255\076\001\077\001\078\001\079\001\255\255\081\001\097\001\
\098\001\099\001\100\001\115\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\110\001\255\255\112\001\113\001\
\114\001\002\001\116\001\117\001\118\001\255\255\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\115\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\255\255\061\001\062\001\063\001\255\255\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\097\001\098\001\255\255\100\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\110\001\002\001\112\001\
\255\255\255\255\115\001\007\001\008\001\118\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\002\001\
\255\255\255\255\255\255\255\255\007\001\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\097\001\098\001\255\255\
\100\001\101\001\102\001\255\255\255\255\072\001\255\255\255\255\
\255\255\255\255\110\001\255\255\112\001\080\001\255\255\255\255\
\255\255\255\255\118\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\097\001\098\001\
\255\255\100\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\110\001\002\001\112\001\255\255\255\255\
\255\255\007\001\255\255\118\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\002\001\255\255\255\255\255\255\
\255\255\007\001\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\071\001\072\001\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\062\001\063\001\
\255\255\065\001\066\001\097\001\098\001\255\255\100\001\071\001\
\255\255\255\255\072\001\255\255\076\001\077\001\078\001\079\001\
\110\001\081\001\112\001\255\255\255\255\255\255\255\255\255\255\
\118\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\097\001\098\001\255\255\100\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\110\001\002\001\112\001\115\001\255\255\255\255\007\001\255\255\
\118\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\002\001\255\255\255\255\255\255\255\255\007\001\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\074\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\097\001\098\001\255\255\100\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\110\001\255\255\112\001\
\080\001\255\255\255\255\255\255\255\255\118\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\097\001\098\001\255\255\100\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\110\001\002\001\
\112\001\255\255\255\255\255\255\007\001\255\255\118\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\067\001\068\001\097\001\098\001\
\071\001\100\001\255\255\255\255\075\001\076\001\077\001\078\001\
\079\001\255\255\081\001\110\001\255\255\112\001\255\255\255\255\
\255\255\255\255\255\255\118\001\255\255\255\255\002\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\097\001\098\001\
\255\255\100\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\110\001\115\001\112\001\026\001\255\255\
\255\255\029\001\030\001\118\001\255\255\033\001\255\255\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\255\255\061\001\062\001\063\001\255\255\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\255\255\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\097\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\110\001\255\255\112\001\026\001\255\255\115\001\
\029\001\030\001\255\255\255\255\033\001\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\255\255\
\061\001\062\001\063\001\255\255\065\001\066\001\067\001\068\001\
\255\255\255\255\071\001\255\255\073\001\255\255\255\255\076\001\
\077\001\078\001\079\001\080\001\081\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\097\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\110\001\255\255\112\001\026\001\255\255\115\001\029\001\
\030\001\255\255\255\255\033\001\255\255\255\255\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\255\255\061\001\
\062\001\063\001\255\255\065\001\066\001\067\001\068\001\255\255\
\255\255\071\001\255\255\073\001\255\255\255\255\076\001\077\001\
\078\001\079\001\080\001\081\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\097\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\110\001\255\255\112\001\026\001\255\255\115\001\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\255\255\255\255\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\067\001\068\001\255\255\255\255\
\071\001\002\001\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\097\001\255\255\029\001\030\001\255\255\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\255\255\115\001\255\255\255\255\255\255\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\255\255\255\255\061\001\062\001\063\001\255\255\
\065\001\066\001\067\001\068\001\255\255\255\255\071\001\002\001\
\073\001\255\255\255\255\076\001\077\001\078\001\079\001\080\001\
\081\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\097\001\255\255\029\001\030\001\255\255\255\255\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\110\001\255\255\112\001\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\255\255\
\255\255\255\255\061\001\062\001\063\001\255\255\065\001\066\001\
\067\001\068\001\255\255\255\255\071\001\002\001\073\001\255\255\
\255\255\076\001\077\001\078\001\079\001\080\001\081\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\097\001\255\255\
\029\001\030\001\255\255\255\255\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\110\001\255\255\112\001\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\050\001\051\001\052\001\
\053\001\054\001\255\255\255\255\255\255\255\255\255\255\255\255\
\061\001\062\001\063\001\255\255\065\001\066\001\067\001\068\001\
\255\255\255\255\071\001\002\001\073\001\255\255\255\255\076\001\
\077\001\078\001\079\001\080\001\081\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\026\001\097\001\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\110\001\255\255\112\001\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\050\001\051\001\052\001\053\001\054\001\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\067\001\068\001\255\255\255\255\
\071\001\002\001\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\097\001\255\255\029\001\030\001\255\255\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\051\001\052\001\053\001\054\001\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\062\001\063\001\255\255\
\065\001\066\001\067\001\068\001\255\255\255\255\071\001\002\001\
\073\001\255\255\255\255\076\001\077\001\078\001\079\001\080\001\
\081\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\097\001\255\255\029\001\030\001\255\255\255\255\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\110\001\255\255\112\001\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\051\001\052\001\053\001\054\001\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\062\001\063\001\255\255\065\001\066\001\
\002\001\255\255\255\255\255\255\071\001\255\255\073\001\255\255\
\255\255\076\001\077\001\078\001\079\001\080\001\081\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\255\255\029\001\030\001\255\255\097\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\110\001\255\255\112\001\255\255\049\001\
\050\001\051\001\052\001\053\001\054\001\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\062\001\063\001\255\255\065\001\
\066\001\002\001\255\255\255\255\255\255\071\001\255\255\073\001\
\255\255\255\255\076\001\077\001\078\001\079\001\080\001\081\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\255\255\255\255\029\001\030\001\255\255\097\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\110\001\255\255\112\001\255\255\
\049\001\050\001\051\001\052\001\053\001\054\001\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\062\001\063\001\255\255\
\065\001\066\001\002\001\255\255\255\255\255\255\071\001\255\255\
\073\001\255\255\255\255\076\001\077\001\078\001\079\001\080\001\
\081\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\255\255\029\001\030\001\255\255\
\097\001\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\110\001\255\255\112\001\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\062\001\063\001\
\255\255\065\001\066\001\002\001\255\255\255\255\255\255\071\001\
\255\255\073\001\255\255\255\255\076\001\077\001\078\001\079\001\
\080\001\081\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\026\001\255\255\255\255\029\001\030\001\
\255\255\097\001\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\110\001\255\255\
\112\001\255\255\049\001\050\001\051\001\052\001\053\001\054\001\
\255\255\255\255\255\255\002\001\255\255\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\255\255\255\255\255\255\255\255\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\050\001\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\002\001\255\255\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\255\255\255\255\255\255\255\255\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\050\001\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\002\001\255\255\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\255\255\255\255\255\255\255\255\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\050\001\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\002\001\255\255\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\255\255\255\255\255\255\255\255\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\002\001\255\255\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\255\255\255\255\255\255\255\255\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\002\001\255\255\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\255\255\255\255\255\255\255\255\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\002\001\255\255\255\255\255\255\062\001\
\063\001\255\255\065\001\066\001\255\255\255\255\255\255\255\255\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\002\001\255\255\255\255\255\255\062\001\
\063\001\255\255\065\001\066\001\255\255\255\255\255\255\255\255\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\002\001\255\255\255\255\255\255\062\001\
\255\255\255\255\065\001\066\001\255\255\255\255\255\255\255\255\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\002\001\255\255\255\255\255\255\062\001\
\255\255\255\255\065\001\066\001\255\255\255\255\255\255\255\255\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\002\001\255\255\255\255\255\255\255\255\
\255\255\255\255\065\001\066\001\255\255\255\255\255\255\255\255\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\000\001\001\001\255\255\255\255\
\255\255\005\001\097\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\110\001\
\255\255\112\001\255\255\255\255\255\255\255\255\026\001\255\255\
\255\255\029\001\065\001\066\001\255\255\255\255\034\001\035\001\
\071\001\255\255\073\001\255\255\255\255\076\001\077\001\078\001\
\079\001\080\001\081\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\056\001\057\001\000\001\001\001\
\060\001\061\001\097\001\005\001\064\001\007\001\008\001\255\255\
\255\255\255\255\255\255\071\001\072\001\255\255\255\255\110\001\
\255\255\112\001\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\255\255\029\001\088\001\255\255\255\255\255\255\
\034\001\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\101\001\102\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\055\001\056\001\057\001\
\000\001\001\001\060\001\061\001\255\255\005\001\064\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\072\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\255\255\029\001\088\001\255\255\
\255\255\255\255\034\001\035\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\101\001\102\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\056\001\057\001\000\001\001\001\060\001\061\001\255\255\005\001\
\064\001\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\072\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\255\255\029\001\
\088\001\255\255\255\255\255\255\034\001\035\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\101\001\102\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\056\001\057\001\255\255\001\001\060\001\061\001\
\255\255\005\001\064\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\072\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\255\255\
\255\255\029\001\088\001\255\255\255\255\255\255\034\001\035\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\101\001\
\102\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\056\001\057\001\255\255\255\255\
\060\001\061\001\255\255\255\255\064\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\072\001\255\255\255\255\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\088\001\061\001\062\001\063\001\
\255\255\065\001\066\001\067\001\068\001\255\255\255\255\071\001\
\255\255\101\001\102\001\075\001\076\001\255\255\078\001\079\001\
\255\255\081\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\067\001\068\001\255\255\255\255\
\071\001\255\255\255\255\255\255\255\255\076\001\077\001\078\001\
\079\001\255\255\081\001\115\001\255\255\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\255\255\061\001\062\001\063\001\255\255\065\001\066\001\067\001\
\068\001\255\255\255\255\071\001\255\255\255\255\255\255\255\255\
\076\001\077\001\078\001\079\001\115\001\081\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\255\255\061\001\062\001\063\001\255\255\065\001\066\001\
\067\001\068\001\255\255\255\255\071\001\255\255\255\255\255\255\
\255\255\076\001\077\001\078\001\079\001\255\255\081\001\115\001\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\255\255\255\255\061\001\062\001\063\001\
\255\255\065\001\066\001\067\001\068\001\255\255\255\255\071\001\
\255\255\255\255\255\255\255\255\076\001\077\001\078\001\079\001\
\115\001\081\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\255\255\255\255\255\255\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\067\001\068\001\255\255\255\255\
\071\001\255\255\255\255\255\255\255\255\076\001\077\001\078\001\
\079\001\255\255\081\001\115\001\255\255\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\255\255\255\255\
\255\255\061\001\062\001\063\001\255\255\065\001\066\001\067\001\
\068\001\255\255\255\255\071\001\255\255\255\255\255\255\255\255\
\076\001\077\001\078\001\079\001\115\001\081\001\049\001\050\001\
\051\001\052\001\053\001\054\001\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\062\001\063\001\255\255\065\001\066\001\
\067\001\068\001\255\255\255\255\071\001\255\255\255\255\255\255\
\255\255\076\001\077\001\078\001\079\001\255\255\081\001\115\001\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\062\001\063\001\
\255\255\065\001\066\001\067\001\068\001\255\255\255\255\071\001\
\255\255\255\255\255\255\255\255\076\001\077\001\078\001\079\001\
\115\001\081\001\049\001\050\001\051\001\052\001\053\001\054\001\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\062\001\
\063\001\255\255\065\001\066\001\067\001\068\001\255\255\255\255\
\071\001\255\255\255\255\255\255\255\255\076\001\077\001\078\001\
\079\001\255\255\081\001\115\001\255\255\049\001\050\001\051\001\
\052\001\053\001\054\001\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\062\001\063\001\255\255\065\001\066\001\255\255\
\255\255\255\255\255\255\071\001\255\255\255\255\255\255\255\255\
\076\001\077\001\078\001\079\001\115\001\081\001\049\001\050\001\
\051\001\052\001\053\001\054\001\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\062\001\063\001\255\255\065\001\066\001\
\255\255\255\255\255\255\255\255\071\001\255\255\255\255\255\255\
\255\255\076\001\077\001\078\001\079\001\255\255\081\001\115\001\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\062\001\063\001\
\255\255\065\001\066\001\255\255\255\255\255\255\255\255\071\001\
\049\001\050\001\255\255\255\255\076\001\077\001\078\001\079\001\
\115\001\081\001\255\255\255\255\061\001\062\001\063\001\255\255\
\065\001\066\001\255\255\255\255\255\255\255\255\071\001\049\001\
\050\001\255\255\255\255\076\001\077\001\078\001\079\001\255\255\
\081\001\255\255\255\255\061\001\062\001\063\001\255\255\065\001\
\066\001\255\255\255\255\115\001\255\255\071\001\255\255\255\255\
\255\255\255\255\076\001\077\001\078\001\079\001\255\255\081\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\115\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\115\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\255\255\061\001\062\001\063\001\255\255\065\001\
\066\001\067\001\068\001\069\001\070\001\255\255\072\001\073\001\
\255\255\075\001\255\255\077\001\255\255\079\001\255\255\081\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\255\255\061\001\062\001\063\001\255\255\065\001\066\001\067\001\
\068\001\069\001\070\001\255\255\072\001\255\255\255\255\075\001\
\255\255\255\255\078\001\079\001\255\255\081\001"

let yynames_const = "\
  EOF\000\
  EQ\000\
  PLUS_EQ\000\
  MINUS_EQ\000\
  STAR_EQ\000\
  SLASH_EQ\000\
  PERCENT_EQ\000\
  AND_EQ\000\
  PIPE_EQ\000\
  CIRC_EQ\000\
  INF_INF_EQ\000\
  SUP_SUP_EQ\000\
  ARROW\000\
  DOT\000\
  EQ_EQ\000\
  EXCLAM_EQ\000\
  INF\000\
  SUP\000\
  INF_EQ\000\
  SUP_EQ\000\
  SLASH\000\
  PERCENT\000\
  PIPE\000\
  CIRC\000\
  PIPE_PIPE\000\
  INF_INF\000\
  SUP_SUP\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  COMMA\000\
  ELLIPSIS\000\
  QUEST\000\
  ELSE\000\
  LABEL__\000\
  BUILTIN_VA_LIST\000\
  BLOCKATTRIBUTE\000\
  PRAGMA_EOL\000\
  AT_NAME\000\
  "

let yynames_block = "\
  IDENT\000\
  QUALIFIER\000\
  CST_CHAR\000\
  CST_WCHAR\000\
  CST_INT\000\
  CST_FLOAT\000\
  NAMED_TYPE\000\
  CST_STRING\000\
  CST_WSTRING\000\
  CHAR\000\
  INT\000\
  BOOL\000\
  DOUBLE\000\
  FLOAT\000\
  VOID\000\
  INT64\000\
  INT32\000\
  ENUM\000\
  STRUCT\000\
  TYPEDEF\000\
  UNION\000\
  SIGNED\000\
  UNSIGNED\000\
  LONG\000\
  SHORT\000\
  VOLATILE\000\
  EXTERN\000\
  STATIC\000\
  CONST\000\
  RESTRICT\000\
  AUTO\000\
  REGISTER\000\
  THREAD\000\
  SIZEOF\000\
  ALIGNOF\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  TILDE\000\
  AND\000\
  EXCLAM\000\
  AND_AND\000\
  PLUS_PLUS\000\
  MINUS_MINUS\000\
  LPAREN\000\
  RBRACE\000\
  LBRACE\000\
  SEMICOLON\000\
  BREAK\000\
  CONTINUE\000\
  GOTO\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  WHILE\000\
  DO\000\
  FOR\000\
  IF\000\
  TRY\000\
  EXCEPT\000\
  FINALLY\000\
  ATTRIBUTE\000\
  INLINE\000\
  ASM\000\
  TYPEOF\000\
  FUNCTION__\000\
  PRETTY_FUNCTION__\000\
  BUILTIN_VA_ARG\000\
  ATTRIBUTE_USED\000\
  BUILTIN_TYPES_COMPAT\000\
  BUILTIN_OFFSETOF\000\
  DECLSPEC\000\
  MSASM\000\
  MSATTR\000\
  PRAGMA_LINE\000\
  PRAGMA\000\
  AT_TRANSFORM\000\
  AT_TRANSFORMEXPR\000\
  AT_SPECIFIER\000\
  AT_EXPR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    Obj.repr(
# 394 "src/frontc/cparser.mly"
              (_1)
# 2798 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 396 "src/frontc/cparser.mly"
                 (_1)
# 2805 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 399 "src/frontc/cparser.mly"
                                        ( [] )
# 2811 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 400 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 2819 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 401 "src/frontc/cparser.mly"
                                        ( _2 )
# 2827 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 405 "src/frontc/cparser.mly"
                               ( currentLoc () )
# 2833 "src/frontc/cparser.ml"
               : Cabs.cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 410 "src/frontc/cparser.mly"
                                        ( _1 )
# 2840 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 411 "src/frontc/cparser.mly"
                                        ( _1 )
# 2847 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 414 "src/frontc/cparser.mly"
                                        ( LINKAGE (fst _2, (*handleLoc*) (snd _2), [ _3 ]) )
# 2856 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 416 "src/frontc/cparser.mly"
                                        ( LINKAGE (fst _2, (*handleLoc*) (snd _2), _4)  )
# 2867 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 418 "src/frontc/cparser.mly"
                                        ( GLOBASM (fst _3, (*handleLoc*) _1) )
# 2877 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pragma) in
    Obj.repr(
# 419 "src/frontc/cparser.mly"
                                        ( _1 )
# 2884 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardef_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 424 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in 
                             (* Make the function declarator *)
                             doDeclaration ((*handleLoc*) (snd _1)) []
                               [((fst _1, PROTO(JUSTBASE, pardecl,isva), [], cabslu),
                                 NO_INIT)]
                            )
# 2901 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 433 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             doDeclaration ((*handleLoc*)(snd _1)) []
                               [((fst _1, PROTO(JUSTBASE,[],false), [], cabslu),
                                 NO_INIT)]
                            )
# 2914 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 439 "src/frontc/cparser.mly"
                                                                        (
    checkConnective(fst _5);
    TRANSFORMER(_3, _7, _1)
  )
# 2931 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 444 "src/frontc/cparser.mly"
                                                                                   (
    checkConnective(fst _5);
    EXPRTRANSFORMER(fst _3, fst _7, _1)
  )
# 2948 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 448 "src/frontc/cparser.mly"
                           ( PRAGMA (VARIABLE "parse_error", _1) )
# 2956 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 452 "src/frontc/cparser.mly"
             (fst _1)
# 2963 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 453 "src/frontc/cparser.mly"
                  (fst _1)
# 2970 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 454 "src/frontc/cparser.mly"
                                        ( "@name(" ^ fst _3 ^ ")" )
# 2978 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 458 "src/frontc/cparser.mly"
                                        ( () )
# 2984 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    Obj.repr(
# 459 "src/frontc/cparser.mly"
                                        ( () )
# 2990 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 466 "src/frontc/cparser.mly"
          (VARIABLE (fst _1), snd _1)
# 2997 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant * cabsloc) in
    Obj.repr(
# 468 "src/frontc/cparser.mly"
          (CONSTANT (fst _1), snd _1)
# 3004 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 470 "src/frontc/cparser.mly"
          (PAREN (smooth_expression (fst _1)), snd _1)
# 3011 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 472 "src/frontc/cparser.mly"
          ( GNU_BODY (fst3 _2), _1 )
# 3019 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 476 "src/frontc/cparser.mly"
                         ( EXPR_PATTERN(fst _3), _1 )
# 3028 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 481 "src/frontc/cparser.mly"
                        ( _1 )
# 3035 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 483 "src/frontc/cparser.mly"
   (INDEX (fst _1, smooth_expression _2), snd _1)
# 3043 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    Obj.repr(
# 485 "src/frontc/cparser.mly"
   (CALL (fst _1, _3), snd _1)
# 3052 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 487 "src/frontc/cparser.mly"
                        ( let b, d = _5 in
                          CALL (VARIABLE "__builtin_va_arg", 
                                [fst _3; TYPE_SIZEOF (b, d)]), _1 )
# 3064 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 491 "src/frontc/cparser.mly"
                        ( let b1,d1 = _3 in
                          let b2,d2 = _5 in
                          CALL (VARIABLE "__builtin_types_compatible_p", 
                                [TYPE_SIZEOF(b1,d1); TYPE_SIZEOF(b2,d2)]), _1 )
# 3077 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    Obj.repr(
# 496 "src/frontc/cparser.mly"
                        ( transformOffsetOf _3 _5, _1 )
# 3087 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 498 "src/frontc/cparser.mly"
          (MEMBEROF (fst _1, _3), snd _1)
# 3095 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 500 "src/frontc/cparser.mly"
          (MEMBEROFPTR (fst _1, _3), snd _1)
# 3103 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 502 "src/frontc/cparser.mly"
          (UNARY (POSINCR, fst _1), snd _1)
# 3111 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 504 "src/frontc/cparser.mly"
          (UNARY (POSDECR, fst _1), snd _1)
# 3119 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 507 "src/frontc/cparser.mly"
          ( CAST(_2, COMPOUND_INIT _5), _1 )
# 3130 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 512 "src/frontc/cparser.mly"
          ( VARIABLE (_1) )
# 3137 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'offsetof_member_designator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 514 "src/frontc/cparser.mly"
   ( MEMBEROF (_1, fst _3) )
# 3145 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 516 "src/frontc/cparser.mly"
   ( INDEX (_1, smooth_expression _2) )
# 3153 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 521 "src/frontc/cparser.mly"
                        ( _1 )
# 3160 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 523 "src/frontc/cparser.mly"
          (UNARY (PREINCR, fst _2), _1)
# 3168 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 525 "src/frontc/cparser.mly"
          (UNARY (PREDECR, fst _2), _1)
# 3176 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 527 "src/frontc/cparser.mly"
          (EXPR_SIZEOF (fst _2), _1)
# 3184 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 529 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_SIZEOF (b, d), _1)
# 3193 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 531 "src/frontc/cparser.mly"
          (EXPR_ALIGNOF (fst _2), _1)
# 3201 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 533 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_ALIGNOF (b, d), _1)
# 3210 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 535 "src/frontc/cparser.mly"
          (UNARY (PLUS, fst _2), _1)
# 3218 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 537 "src/frontc/cparser.mly"
          (UNARY (MINUS, fst _2), _1)
# 3226 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 539 "src/frontc/cparser.mly"
          (UNARY (MEMOF, fst _2), _1)
# 3234 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 541 "src/frontc/cparser.mly"
          (UNARY (ADDROF, fst _2), _1)
# 3242 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 543 "src/frontc/cparser.mly"
          (UNARY (NOT, fst _2), _1)
# 3250 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 545 "src/frontc/cparser.mly"
          (UNARY (BNOT, fst _2), _1)
# 3258 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 546 "src/frontc/cparser.mly"
                               ( LABELADDR (fst _2), _1 )
# 3266 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 551 "src/frontc/cparser.mly"
                         ( _1 )
# 3273 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 553 "src/frontc/cparser.mly"
           ( CAST(_2, SINGLE_INIT (fst _4)), _1 )
# 3282 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 558 "src/frontc/cparser.mly"
                         ( _1 )
# 3289 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 560 "src/frontc/cparser.mly"
   (BINARY(MUL, fst _1, fst _3), snd _1)
# 3298 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 562 "src/frontc/cparser.mly"
   (BINARY(DIV, fst _1, fst _3), snd _1)
# 3306 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 564 "src/frontc/cparser.mly"
   (BINARY(MOD, fst _1, fst _3), snd _1)
# 3314 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 569 "src/frontc/cparser.mly"
                        ( _1 )
# 3321 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 571 "src/frontc/cparser.mly"
   (BINARY(ADD, fst _1, fst _3), snd _1)
# 3330 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 573 "src/frontc/cparser.mly"
   (BINARY(SUB, fst _1, fst _3), snd _1)
# 3339 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 578 "src/frontc/cparser.mly"
                         ( _1 )
# 3346 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 580 "src/frontc/cparser.mly"
   (BINARY(SHL, fst _1, fst _3), snd _1)
# 3354 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 582 "src/frontc/cparser.mly"
   (BINARY(SHR, fst _1, fst _3), snd _1)
# 3362 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 588 "src/frontc/cparser.mly"
                        ( _1 )
# 3369 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 590 "src/frontc/cparser.mly"
   (BINARY(LT, fst _1, fst _3), snd _1)
# 3377 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 592 "src/frontc/cparser.mly"
   (BINARY(GT, fst _1, fst _3), snd _1)
# 3385 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 594 "src/frontc/cparser.mly"
   (BINARY(LE, fst _1, fst _3), snd _1)
# 3393 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 596 "src/frontc/cparser.mly"
   (BINARY(GE, fst _1, fst _3), snd _1)
# 3401 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 601 "src/frontc/cparser.mly"
                        ( _1 )
# 3408 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 603 "src/frontc/cparser.mly"
   (BINARY(EQ, fst _1, fst _3), snd _1)
# 3416 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 605 "src/frontc/cparser.mly"
   (BINARY(NE, fst _1, fst _3), snd _1)
# 3424 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 611 "src/frontc/cparser.mly"
                       ( _1 )
# 3431 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 613 "src/frontc/cparser.mly"
   (BINARY(BAND, fst _1, fst _3), snd _1)
# 3440 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 618 "src/frontc/cparser.mly"
                       ( _1 )
# 3447 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 620 "src/frontc/cparser.mly"
   (BINARY(XOR, fst _1, fst _3), snd _1)
# 3455 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 625 "src/frontc/cparser.mly"
                        ( _1 )
# 3462 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 627 "src/frontc/cparser.mly"
   (BINARY(BOR, fst _1, fst _3), snd _1)
# 3470 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 632 "src/frontc/cparser.mly"
                        ( _1 )
# 3477 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 634 "src/frontc/cparser.mly"
   (BINARY(AND, fst _1, fst _3), snd _1)
# 3486 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 639 "src/frontc/cparser.mly"
                        ( _1 )
# 3493 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 641 "src/frontc/cparser.mly"
   (BINARY(OR, fst _1, fst _3), snd _1)
# 3501 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_expression) in
    Obj.repr(
# 646 "src/frontc/cparser.mly"
                         ( _1 )
# 3508 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 648 "src/frontc/cparser.mly"
   (QUESTION (fst _1, _3, fst _5), snd _1)
# 3517 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 656 "src/frontc/cparser.mly"
                         ( _1 )
# 3524 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 658 "src/frontc/cparser.mly"
   (BINARY(ASSIGN, fst _1, fst _3), snd _1)
# 3532 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 660 "src/frontc/cparser.mly"
   (BINARY(ADD_ASSIGN, fst _1, fst _3), snd _1)
# 3540 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 662 "src/frontc/cparser.mly"
   (BINARY(SUB_ASSIGN, fst _1, fst _3), snd _1)
# 3548 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 664 "src/frontc/cparser.mly"
   (BINARY(MUL_ASSIGN, fst _1, fst _3), snd _1)
# 3556 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 666 "src/frontc/cparser.mly"
   (BINARY(DIV_ASSIGN, fst _1, fst _3), snd _1)
# 3564 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 668 "src/frontc/cparser.mly"
   (BINARY(MOD_ASSIGN, fst _1, fst _3), snd _1)
# 3572 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 670 "src/frontc/cparser.mly"
   (BINARY(BAND_ASSIGN, fst _1, fst _3), snd _1)
# 3580 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 672 "src/frontc/cparser.mly"
   (BINARY(BOR_ASSIGN, fst _1, fst _3), snd _1)
# 3588 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 674 "src/frontc/cparser.mly"
   (BINARY(XOR_ASSIGN, fst _1, fst _3), snd _1)
# 3596 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 676 "src/frontc/cparser.mly"
   (BINARY(SHL_ASSIGN, fst _1, fst _3), snd _1)
# 3604 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 678 "src/frontc/cparser.mly"
   (BINARY(SHR_ASSIGN, fst _1, fst _3), snd _1)
# 3612 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 683 "src/frontc/cparser.mly"
                        ( _1 )
# 3619 "src/frontc/cparser.ml"
               : Cabs.expression * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 688 "src/frontc/cparser.mly"
               (CONST_INT (fst _1), snd _1)
# 3626 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 689 "src/frontc/cparser.mly"
                 (CONST_FLOAT (fst _1), snd _1)
# 3633 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 690 "src/frontc/cparser.mly"
                (CONST_CHAR (fst _1), snd _1)
# 3640 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 691 "src/frontc/cparser.mly"
                 (CONST_WCHAR (fst _1), snd _1)
# 3647 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 692 "src/frontc/cparser.mly"
                             (CONST_STRING (fst _1), snd _1)
# 3654 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * cabsloc) in
    Obj.repr(
# 693 "src/frontc/cparser.mly"
                   (CONST_WSTRING (fst _1), snd _1)
# 3661 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list Queue.t * cabsloc) in
    Obj.repr(
# 699 "src/frontc/cparser.mly"
                                        (
     let queue, location = _1 in
     let buffer = Buffer.create (Queue.length queue) in
     Queue.iter
       (List.iter
	  (fun value ->
	    let char = int64_to_char value in
	    Buffer.add_char buffer char))
       queue;
     Buffer.contents buffer, location
   )
# 3678 "src/frontc/cparser.ml"
               : string * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 713 "src/frontc/cparser.mly"
                                        (intlist_to_string (fst _1) )
# 3685 "src/frontc/cparser.ml"
               : 'one_string_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 716 "src/frontc/cparser.mly"
                                        (
      let queue = Queue.create () in
      Queue.add (fst _1) queue;
      queue, snd _1
    )
# 3696 "src/frontc/cparser.ml"
               : int64 list Queue.t * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list Queue.t * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 721 "src/frontc/cparser.mly"
                                        (
      Queue.add (fst _2) (fst _1);
      _1
    )
# 3707 "src/frontc/cparser.ml"
               : int64 list Queue.t * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 728 "src/frontc/cparser.mly"
                                        ( _1 )
# 3714 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 729 "src/frontc/cparser.mly"
                                        ( (fst _1) @ (fst _2), snd _1 )
# 3722 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 730 "src/frontc/cparser.mly"
                                        ( (fst _1) @ (fst _2), snd _1 )
# 3730 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 735 "src/frontc/cparser.mly"
                  (_1)
# 3737 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 736 "src/frontc/cparser.mly"
                                        ((Cabshelper.explodeStringToInts 
					    !currentFunctionName), _1)
# 3745 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 738 "src/frontc/cparser.mly"
                                        ((Cabshelper.explodeStringToInts 
					    !currentFunctionName), _1)
# 3753 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 743 "src/frontc/cparser.mly"
                        ( SINGLE_INIT (fst _1) )
# 3760 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 745 "src/frontc/cparser.mly"
   ( COMPOUND_INIT _2)
# 3769 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat * Cabs.init_expression) in
    Obj.repr(
# 748 "src/frontc/cparser.mly"
                                            ( [_1] )
# 3776 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat * Cabs.init_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'initializer_list_opt) in
    Obj.repr(
# 749 "src/frontc/cparser.mly"
                                            ( _1 :: _3 )
# 3784 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 752 "src/frontc/cparser.mly"
                                            ( [] )
# 3790 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.initwhat * Cabs.init_expression) list) in
    Obj.repr(
# 753 "src/frontc/cparser.mly"
                                            ( _1 )
# 3797 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'eq_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 756 "src/frontc/cparser.mly"
                                            ( (_1, _3) )
# 3806 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gcc_init_designators) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 757 "src/frontc/cparser.mly"
                                         ( (_1, _2) )
# 3814 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 758 "src/frontc/cparser.mly"
                                        ( (NEXT_INIT, _1) )
# 3821 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 761 "src/frontc/cparser.mly"
                             ( () )
# 3827 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 763 "src/frontc/cparser.mly"
                                 ( () )
# 3833 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 766 "src/frontc/cparser.mly"
                                                 ( INFIELD_INIT(_2, _3) )
# 3841 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 768 "src/frontc/cparser.mly"
                                        ( ATINDEX_INIT(fst _2, _4) )
# 3849 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 770 "src/frontc/cparser.mly"
                                        ( ATINDEXRANGE_INIT(fst _2, fst _4) )
# 3857 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    Obj.repr(
# 773 "src/frontc/cparser.mly"
                                        ( NEXT_INIT )
# 3863 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 774 "src/frontc/cparser.mly"
                                        ( _1 )
# 3870 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    Obj.repr(
# 778 "src/frontc/cparser.mly"
                                        ( INFIELD_INIT(_1, NEXT_INIT) )
# 3877 "src/frontc/cparser.ml"
               : 'gcc_init_designators))
; (fun __caml_parser_env ->
    Obj.repr(
# 782 "src/frontc/cparser.mly"
                                    ( [] )
# 3883 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 783 "src/frontc/cparser.mly"
                                    ( fst _1 )
# 3890 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 788 "src/frontc/cparser.mly"
          (NOTHING)
# 3896 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 790 "src/frontc/cparser.mly"
          (smooth_expression (fst _1))
# 3903 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 794 "src/frontc/cparser.mly"
                                           ([fst _1], snd _1)
# 3910 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 795 "src/frontc/cparser.mly"
                                                  ( fst _1 :: fst _3, snd _1 )
# 3918 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 796 "src/frontc/cparser.mly"
                                                  ( _3 )
# 3925 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 800 "src/frontc/cparser.mly"
                                    ( NOTHING )
# 3931 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 801 "src/frontc/cparser.mly"
                                    ( smooth_expression (fst _1) )
# 3938 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 805 "src/frontc/cparser.mly"
                                                   ( _2 )
# 3946 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 806 "src/frontc/cparser.mly"
                                                   ( [], _1 )
# 3953 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 810 "src/frontc/cparser.mly"
                                                       ( fst _2 )
# 3960 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 811 "src/frontc/cparser.mly"
                                                       ( [] )
# 3966 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'block_begin) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block_attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 818 "src/frontc/cparser.mly"
                                         (!Lexerhack.pop_context();
                                          { blabels = _2;
                                            battrs = _3;
                                            bstmts = _4 },
					    _1, _5
                                         )
# 3982 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 824 "src/frontc/cparser.mly"
                                         ( { blabels = [];
                                             battrs  = [];
                                             bstmts  = [] },
					     _2, _3
                                         )
# 3994 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 831 "src/frontc/cparser.mly"
                           (!Lexerhack.push_context (); _1)
# 4001 "src/frontc/cparser.ml"
               : 'block_begin))
; (fun __caml_parser_env ->
    Obj.repr(
# 835 "src/frontc/cparser.mly"
                                                            ( [] )
# 4007 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 837 "src/frontc/cparser.mly"
                                        ( [("__blockattribute__", _2)] )
# 4014 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    Obj.repr(
# 842 "src/frontc/cparser.mly"
                                         ( [] )
# 4020 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 843 "src/frontc/cparser.mly"
                                         ( DEFINITION(_1) :: _2 )
# 4028 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 844 "src/frontc/cparser.mly"
                                         ( _1 :: _2 )
# 4036 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 846 "src/frontc/cparser.mly"
                                         ( [ LABEL (fst _1, NOP (snd _1), 
                                                    snd _1)] )
# 4044 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 848 "src/frontc/cparser.mly"
                                         ( _2 )
# 4052 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    Obj.repr(
# 852 "src/frontc/cparser.mly"
                                                     ( [] )
# 4058 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 853 "src/frontc/cparser.mly"
                                                     ( _2 @ _4 )
# 4067 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 856 "src/frontc/cparser.mly"
                                         ( [ fst _1 ] )
# 4074 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 857 "src/frontc/cparser.mly"
                                         ( fst _1 :: _3 )
# 4082 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 863 "src/frontc/cparser.mly"
               (NOP ((*handleLoc*) _1) )
# 4089 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 865 "src/frontc/cparser.mly"
          (COMPUTATION (smooth_expression (fst _1), (*handleLoc*)(snd _1)))
# 4097 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 866 "src/frontc/cparser.mly"
                        (BLOCK (fst3 _1, (*handleLoc*)(snd3 _1)))
# 4104 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 868 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _3, NOP _1, _1))
# 4113 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 870 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _3, _5, (*handleLoc*) _1))
# 4123 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 872 "src/frontc/cparser.mly"
                        (SWITCH (smooth_expression (fst _2), _3, (*handleLoc*) _1))
# 4132 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 874 "src/frontc/cparser.mly"
          (WHILE (smooth_expression (fst _2), _3, (*handleLoc*) _1))
# 4141 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 876 "src/frontc/cparser.mly"
                   (DOWHILE (smooth_expression (fst _4), _2, (*handleLoc*) _1))
# 4152 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'for_clause) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 879 "src/frontc/cparser.mly"
                          (FOR (_3, _4, _6, _8, (*handleLoc*) _1))
# 4165 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 881 "src/frontc/cparser.mly"
                   ((* The only attribute that should appear here
                                     is "unused". For now, we drop this on the
                                     floor, since unused labels are usually
                                     removed anyways by Rmtmps. *)
                                  LABEL (fst _1, _4, (snd _1)))
# 4178 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 887 "src/frontc/cparser.mly"
                          (CASE (fst _2, _4, (*handleLoc*) _1))
# 4187 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 889 "src/frontc/cparser.mly"
                          (CASERANGE (fst _2, fst _4, _6, (*handleLoc*) _1))
# 4197 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 891 "src/frontc/cparser.mly"
                          (DEFAULT (NOP _1, (*handleLoc*) _1))
# 4204 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 892 "src/frontc/cparser.mly"
                       (RETURN (NOTHING, (*handleLoc*) _1))
# 4212 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 894 "src/frontc/cparser.mly"
                          (RETURN (smooth_expression (fst _2), (*handleLoc*) _1))
# 4221 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 895 "src/frontc/cparser.mly"
                        (BREAK ((*handleLoc*) _1))
# 4229 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 896 "src/frontc/cparser.mly"
                        (CONTINUE ((*handleLoc*) _1))
# 4237 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 898 "src/frontc/cparser.mly"
                   (GOTO (fst _2, (*handleLoc*) _1))
# 4246 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 900 "src/frontc/cparser.mly"
                                 ( COMPGOTO (smooth_expression (fst _3), (*handleLoc*) _1) )
# 4256 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'asmtemplate) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'asmoutputs) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 902 "src/frontc/cparser.mly"
                        ( ASM (_2, _4, _5, (*handleLoc*) _1) )
# 4268 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 903 "src/frontc/cparser.mly"
                        ( ASM ([], [fst _1], None, (*handleLoc*)(snd _1)))
# 4275 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 905 "src/frontc/cparser.mly"
                        ( let b, _, _ = _2 in
                          let h, _, _ = _5 in
                          if not !Cprint.msvcMode then 
                            parse_error "try/except in GCC code";
                          TRY_EXCEPT (b, COMMA (fst _4), h, (*handleLoc*) _1) )
# 4290 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 911 "src/frontc/cparser.mly"
                        ( let b, _, _ = _2 in
                          let h, _, _ = _4 in
                          if not !Cprint.msvcMode then 
                            parse_error "try/finally in GCC code";
                          TRY_FINALLY (b, h, (*handleLoc*) _1) )
# 4304 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 917 "src/frontc/cparser.mly"
                                 ( (NOP _2))
# 4312 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 922 "src/frontc/cparser.mly"
                                 ( FC_EXP _1 )
# 4320 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 923 "src/frontc/cparser.mly"
                                 ( FC_DECL _1 )
# 4327 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.init_name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 928 "src/frontc/cparser.mly"
                                       ( doDeclaration ((*handleLoc*)(snd _1)) (fst _1) _2 )
# 4336 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 930 "src/frontc/cparser.mly"
                                       ( doDeclaration ((*handleLoc*)(snd _1)) (fst _1) [] )
# 4344 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name) in
    Obj.repr(
# 933 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 4351 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.init_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name list) in
    Obj.repr(
# 934 "src/frontc/cparser.mly"
                                                 ( _1 :: _3 )
# 4359 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 938 "src/frontc/cparser.mly"
                                        ( (_1, NO_INIT) )
# 4366 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 940 "src/frontc/cparser.mly"
                                        ( (_1, _3) )
# 4374 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 945 "src/frontc/cparser.mly"
                                        ( SpecTypedef :: _2, _1  )
# 4382 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 946 "src/frontc/cparser.mly"
                                        ( SpecStorage EXTERN :: _2, _1 )
# 4390 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 947 "src/frontc/cparser.mly"
                                        ( SpecStorage STATIC :: _2, _1 )
# 4398 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 948 "src/frontc/cparser.mly"
                                        ( SpecStorage AUTO :: _2, _1 )
# 4406 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 949 "src/frontc/cparser.mly"
                                        ( SpecStorage REGISTER :: _2, _1)
# 4414 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : typeSpecifier * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt_no_named) in
    Obj.repr(
# 951 "src/frontc/cparser.mly"
                                          ( SpecType (fst _1) :: _2, snd _1 )
# 4422 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 953 "src/frontc/cparser.mly"
                                        ( SpecInline :: _2, _1 )
# 4430 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 954 "src/frontc/cparser.mly"
                                        ( (fst _1) :: _2, snd _1 )
# 4438 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 955 "src/frontc/cparser.mly"
                                        ( SpecAttr (fst _1) :: _2, snd _1 )
# 4446 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 957 "src/frontc/cparser.mly"
                                        ( [ SpecPattern(fst _3) ], _1 )
# 4455 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 962 "src/frontc/cparser.mly"
                                        ( [] )
# 4461 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 963 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 4468 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 970 "src/frontc/cparser.mly"
                                        ( [] )
# 4474 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 971 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 4481 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 974 "src/frontc/cparser.mly"
                    ( Tvoid, _1)
# 4488 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 975 "src/frontc/cparser.mly"
                    ( Tchar, _1 )
# 4495 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 976 "src/frontc/cparser.mly"
                    ( Tbool, _1 )
# 4502 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 977 "src/frontc/cparser.mly"
                    ( Tshort, _1 )
# 4509 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 978 "src/frontc/cparser.mly"
                    ( Tint, _1 )
# 4516 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 979 "src/frontc/cparser.mly"
                    ( Tlong, _1 )
# 4523 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 980 "src/frontc/cparser.mly"
                    ( Tint64, _1 )
# 4530 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 981 "src/frontc/cparser.mly"
                    ( Tfloat, _1 )
# 4537 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 982 "src/frontc/cparser.mly"
                    ( Tdouble, _1 )
# 4544 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 983 "src/frontc/cparser.mly"
                    ( Tsigned, _1 )
# 4551 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 984 "src/frontc/cparser.mly"
                    ( Tunsigned, _1 )
# 4558 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 986 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, None,    []), _1 )
# 4566 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 988 "src/frontc/cparser.mly"
                                                   ( Tstruct (_3, None,    _2), _1 )
# 4575 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 990 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, Some _4, []), _1 )
# 4586 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 992 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", Some _3, []), _1 )
# 4596 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 994 "src/frontc/cparser.mly"
                                                   ( Tstruct (_3, Some _5, _2), _1 )
# 4608 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 996 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", Some _4, _2), _1 )
# 4619 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 998 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, None,    []), _1 )
# 4627 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1000 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, Some _4, []), _1 )
# 4638 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1002 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", Some _3, []), _1 )
# 4648 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1004 "src/frontc/cparser.mly"
                                                   ( Tunion  (_3, Some _5, _2), _1 )
# 4660 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1006 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", Some _4, _2), _1 )
# 4671 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1008 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, None,    []), _1 )
# 4679 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1010 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, Some _4, []), _1 )
# 4691 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1012 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _3, []), _1 )
# 4702 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1014 "src/frontc/cparser.mly"
                                                   ( Tenum   (_3, Some _5, _2), _1 )
# 4715 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1016 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _4, _2), _1 )
# 4727 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1017 "src/frontc/cparser.mly"
                    ( Tnamed (fst _1), snd _1 )
# 4734 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1018 "src/frontc/cparser.mly"
                                        ( TtypeofE (fst _3), _1 )
# 4743 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1019 "src/frontc/cparser.mly"
                                        ( let s, d = _3 in
                                          TtypeofT (s, d), _1 )
# 4753 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1025 "src/frontc/cparser.mly"
                                         ( [] )
# 4759 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1027 "src/frontc/cparser.mly"
                                         ( (fst _1, 
                                            [(missingFieldDecl, None)]) :: _3 )
# 4769 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1031 "src/frontc/cparser.mly"
                                         ( _2 )
# 4777 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : (Cabs.name * expression option) list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1033 "src/frontc/cparser.mly"
                                          ( (fst _1, _2) 
                                            :: _4 )
# 4788 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1036 "src/frontc/cparser.mly"
                                          ( _2 )
# 4796 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1039 "src/frontc/cparser.mly"
                                          ( _3 )
# 4804 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name * expression option) in
    Obj.repr(
# 1042 "src/frontc/cparser.mly"
                                         ( [_1] )
# 4811 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name * expression option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.name * expression option) list) in
    Obj.repr(
# 1043 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 4819 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1046 "src/frontc/cparser.mly"
                                    ( (_1, None) )
# 4826 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1048 "src/frontc/cparser.mly"
                                    ( let (n,decl,al,loc) = _1 in
                                      let al' = al @ _4 in
                                     ((n,decl,al',loc), Some (fst _3)) )
# 4837 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1051 "src/frontc/cparser.mly"
                                    ( (missingFieldDecl, Some (fst _2)) )
# 4844 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1055 "src/frontc/cparser.mly"
                  ([_1])
# 4851 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1056 "src/frontc/cparser.mly"
                                       (_1 @ [_3])
# 4859 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    Obj.repr(
# 1057 "src/frontc/cparser.mly"
                                        ( _1 )
# 4866 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1060 "src/frontc/cparser.mly"
            ((fst _1, NOTHING, snd _1))
# 4873 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1061 "src/frontc/cparser.mly"
                         ((fst _1, fst _3, snd _1))
# 4881 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1067 "src/frontc/cparser.mly"
                               ( let (n, decl) = _2 in
                                (n, applyPointer (fst _1) decl, _3, (snd _1)) )
# 4891 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1075 "src/frontc/cparser.mly"
                                   ( (_1, JUSTBASE) )
# 4898 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name) in
    Obj.repr(
# 1078 "src/frontc/cparser.mly"
                                   ( let (n,decl,al,loc) = _3 in
                                     (n, PARENTYPE(_2,decl,al)) )
# 4908 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1082 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, _4)) )
# 4918 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    Obj.repr(
# 1085 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, NOTHING)) )
# 4927 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1088 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     (n, PROTO(decl, params, isva))
                                   )
# 4940 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1095 "src/frontc/cparser.mly"
                                   ( !Lexerhack.push_context () )
# 4947 "src/frontc/cparser.ml"
               : 'parameter_list_startscope))
; (fun __caml_parser_env ->
    Obj.repr(
# 1098 "src/frontc/cparser.mly"
                                   ( ([], false) )
# 4953 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1099 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _2 in 
                                     (_1 :: params, isva) 
                                   )
# 4963 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1104 "src/frontc/cparser.mly"
                                        ( ([], false) )
# 4969 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    Obj.repr(
# 1105 "src/frontc/cparser.mly"
                                        ( ([], true) )
# 4975 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1106 "src/frontc/cparser.mly"
                                        ( let (params, isva) = _3 in 
                                          (_2 :: params, isva)
                                        )
# 4985 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1113 "src/frontc/cparser.mly"
                                          ( (fst _1, _2) )
# 4993 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1114 "src/frontc/cparser.mly"
                                          ( let d, a = _2 in
                                            (fst _1, ("", d, a, cabslu)) )
# 5002 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1116 "src/frontc/cparser.mly"
                                          ( (fst _1, ("", JUSTBASE, [], cabslu)) )
# 5009 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    Obj.repr(
# 1117 "src/frontc/cparser.mly"
                                          ( _2 )
# 5017 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_old_proto_decl) in
    Obj.repr(
# 1122 "src/frontc/cparser.mly"
                                      ( let (n, decl, a) = _2 in
					  (n, applyPointer (fst _1) decl, 
                                           a, snd _1) 
                                      )
# 5028 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1131 "src/frontc/cparser.mly"
                                   ( let par_decl, isva = doOldParDecl _3 _5 in
                                     let n, decl = _1 in
                                     (n, PROTO(decl, par_decl, isva), [])
                                   )
# 5041 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1136 "src/frontc/cparser.mly"
                                   ( let n, decl = _1 in
                                     (n, PROTO(decl, [], false), [])
                                   )
# 5051 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1151 "src/frontc/cparser.mly"
                                               ( [fst _1] )
# 5058 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 1152 "src/frontc/cparser.mly"
                                               ( let rest = _3 in
                                                 (fst _1 :: rest) )
# 5067 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1157 "src/frontc/cparser.mly"
                                          ( ([], false) )
# 5073 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1159 "src/frontc/cparser.mly"
                                          ( ([(fst _1, _2)], true) )
# 5082 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1161 "src/frontc/cparser.mly"
                                          ( let rest, isva = _4 in
                                            ((fst _1, _2) :: rest, isva) 
                                          )
# 5094 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1167 "src/frontc/cparser.mly"
                                          ( [_1] )
# 5101 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 1168 "src/frontc/cparser.mly"
                                          ( _1 :: _3 )
# 5109 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    Obj.repr(
# 1169 "src/frontc/cparser.mly"
                                          ( [] )
# 5115 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1174 "src/frontc/cparser.mly"
                                ( _2 :: fst _3, _1 )
# 5124 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1177 "src/frontc/cparser.mly"
                                 ( let l = currentLoc () in
                                   ([], l) )
# 5131 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1179 "src/frontc/cparser.mly"
                                 ( _1 )
# 5138 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1183 "src/frontc/cparser.mly"
                               ( let d, a = _2 in
                                 if a <> [] then begin
                                   parse_error "attributes in type name";
                                   raise Parsing.Parse_error
                                 end;
                                 (fst _1, d) 
                               )
# 5152 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1190 "src/frontc/cparser.mly"
                               ( (fst _1, JUSTBASE) )
# 5159 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1193 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) _2, _3 )
# 5168 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1194 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) JUSTBASE, [] )
# 5175 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1201 "src/frontc/cparser.mly"
                                   ( let d, a = _3 in
                                     PARENTYPE (_2, d, a)
                                   )
# 5186 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1206 "src/frontc/cparser.mly"
                                   ( JUSTBASE )
# 5193 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1209 "src/frontc/cparser.mly"
                                   ( ARRAY(_1, [], _3) )
# 5201 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1212 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     PROTO (_1, params, isva)
                                   )
# 5213 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type) in
    Obj.repr(
# 1218 "src/frontc/cparser.mly"
                                    ( _1 )
# 5220 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1219 "src/frontc/cparser.mly"
                                    ( JUSTBASE )
# 5226 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : cabsloc * spec_elem list * name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 1223 "src/frontc/cparser.mly"
          ( let (loc, specs, decl) = _1 in
            currentFunctionName := "<__FUNCTION__ used outside any functions>";
            !Lexerhack.pop_context (); (* The context pushed by 
                                    * announceFunctionName *)
            doFunctionDef ((*handleLoc*) loc) (trd3 _2) specs decl (fst3 _2)
          )
# 5239 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1233 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 5249 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1239 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 5259 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1244 "src/frontc/cparser.mly"
                           ( let (params, isva) = _3 in
                             let fdec = 
                               (fst _1, PROTO(JUSTBASE, params, isva), [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                           )
# 5275 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1255 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in
                             (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, pardecl,isva), 
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec) 
                            )
# 5295 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1268 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, [], false), 
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                            )
# 5311 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1281 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_CONST), _1 )
# 5318 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1282 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_VOLATILE), _1 )
# 5325 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1283 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_RESTRICT), _1 )
# 5332 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1288 "src/frontc/cparser.mly"
                   ( [])
# 5338 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1289 "src/frontc/cparser.mly"
                                 ( fst _1 :: _2 )
# 5346 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1295 "src/frontc/cparser.mly"
                                        ( [] )
# 5352 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1296 "src/frontc/cparser.mly"
                                        ( fst _1 :: _2 )
# 5360 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1298 "src/frontc/cparser.mly"
                                        ( ("__asm__", 
					   [CONSTANT(CONST_STRING (fst _3))]) :: _5 )
# 5371 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    Obj.repr(
# 1305 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3), _1 )
# 5380 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1310 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2), _1 )
# 5388 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1311 "src/frontc/cparser.mly"
                                        ( (fst _1, []), snd _1 )
# 5395 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1313 "src/frontc/cparser.mly"
                                        ( ("__thread",[]), _1 )
# 5402 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1314 "src/frontc/cparser.mly"
                                  (("__attribute__",[VARIABLE(fst _1)]),snd _1)
# 5409 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    Obj.repr(
# 1318 "src/frontc/cparser.mly"
                   ( [])
# 5415 "src/frontc/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv_list) in
    Obj.repr(
# 1319 "src/frontc/cparser.mly"
                                        ( fst _1 :: _2 )
# 5423 "src/frontc/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv) in
    Obj.repr(
# 1324 "src/frontc/cparser.mly"
                                        ( _1 )
# 5430 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1325 "src/frontc/cparser.mly"
                                        ( ("const", []), _1 )
# 5437 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1326 "src/frontc/cparser.mly"
                                        ( ("restrict",[]), _1 )
# 5444 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1327 "src/frontc/cparser.mly"
                                        ( ("volatile",[]), _1 )
# 5451 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    Obj.repr(
# 1335 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3) )
# 5460 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1336 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2) )
# 5468 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'just_attribute) in
    Obj.repr(
# 1342 "src/frontc/cparser.mly"
                                        ( [_1] )
# 5475 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'just_attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'just_attributes) in
    Obj.repr(
# 1343 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 5483 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1348 "src/frontc/cparser.mly"
                          ( PRAGMA (_2, _1) )
# 5491 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1349 "src/frontc/cparser.mly"
                                   ( PRAGMA (_2, _1) )
# 5500 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1350 "src/frontc/cparser.mly"
                                        ( PRAGMA (VARIABLE (fst _1), 
                                                  snd _1) )
# 5508 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1357 "src/frontc/cparser.mly"
             ( VARIABLE (fst _1) )
# 5515 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1359 "src/frontc/cparser.mly"
                  ( VARIABLE (fst _1) )
# 5522 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1360 "src/frontc/cparser.mly"
                                        ( _2 )
# 5530 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1361 "src/frontc/cparser.mly"
                                         ( CALL(VARIABLE (fst _1), [VARIABLE (fst _2)]) )
# 5538 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1362 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_INT (fst _1)) )
# 5545 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 1363 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_STRING (fst _1)) )
# 5552 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1367 "src/frontc/cparser.mly"
                                         ( VARIABLE "aconst" )
# 5559 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1369 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 5567 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1373 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 5575 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1375 "src/frontc/cparser.mly"
                                         ( VARIABLE ("default:" ^ fst _3) )
# 5583 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1380 "src/frontc/cparser.mly"
                                         ( VARIABLE ("__noreturn__") )
# 5590 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_attr) in
    Obj.repr(
# 1384 "src/frontc/cparser.mly"
                                         ( _1 )
# 5597 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1387 "src/frontc/cparser.mly"
                                     ( CALL(VARIABLE (fst _1), [VARIABLE ""]) )
# 5605 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1388 "src/frontc/cparser.mly"
                                     ( CALL(VARIABLE (fst _1), _2) )
# 5613 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1390 "src/frontc/cparser.mly"
                                         (MEMBEROFPTR (_1, _3))
# 5621 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1391 "src/frontc/cparser.mly"
                                         (MEMBEROF (_1, _3))
# 5629 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1392 "src/frontc/cparser.mly"
                                         (INDEX (_1, _3) )
# 5637 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_attr) in
    Obj.repr(
# 1399 "src/frontc/cparser.mly"
                                         ( _1 )
# 5644 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1400 "src/frontc/cparser.mly"
                                         (EXPR_SIZEOF (fst _2) )
# 5652 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1402 "src/frontc/cparser.mly"
                           (let b, d = _3 in TYPE_SIZEOF (b, d))
# 5661 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1404 "src/frontc/cparser.mly"
                                         (EXPR_ALIGNOF (fst _2) )
# 5669 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1405 "src/frontc/cparser.mly"
                                         (let b, d = _3 in TYPE_ALIGNOF (b, d))
# 5678 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1406 "src/frontc/cparser.mly"
                                        (UNARY (PLUS, _2))
# 5686 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1407 "src/frontc/cparser.mly"
                                        (UNARY (MINUS, _2))
# 5694 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1408 "src/frontc/cparser.mly"
                            (UNARY (MEMOF, _2))
# 5702 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1410 "src/frontc/cparser.mly"
                                 (UNARY (ADDROF, _2))
# 5710 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1411 "src/frontc/cparser.mly"
                                 (UNARY (NOT, _2))
# 5718 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1412 "src/frontc/cparser.mly"
                                        (UNARY (BNOT, _2))
# 5726 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_attr) in
    Obj.repr(
# 1416 "src/frontc/cparser.mly"
                                         ( _1 )
# 5733 "src/frontc/cparser.ml"
               : 'cast_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1420 "src/frontc/cparser.mly"
                                        ( _1 )
# 5740 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1421 "src/frontc/cparser.mly"
                                        (BINARY(MUL ,_1 , _3))
# 5749 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1422 "src/frontc/cparser.mly"
                                          (BINARY(DIV ,_1 , _3))
# 5757 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1423 "src/frontc/cparser.mly"
                                          (BINARY(MOD ,_1 , _3))
# 5765 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1428 "src/frontc/cparser.mly"
                                        ( _1 )
# 5772 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1429 "src/frontc/cparser.mly"
                                            (BINARY(ADD ,_1 , _3))
# 5781 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1430 "src/frontc/cparser.mly"
                                            (BINARY(SUB ,_1 , _3))
# 5790 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1434 "src/frontc/cparser.mly"
                                        ( _1 )
# 5797 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1435 "src/frontc/cparser.mly"
                                     (BINARY(SHL ,_1 , _3))
# 5805 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1436 "src/frontc/cparser.mly"
                                     (BINARY(SHR ,_1 , _3))
# 5813 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1440 "src/frontc/cparser.mly"
                                        ( _1 )
# 5820 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1441 "src/frontc/cparser.mly"
                                   (BINARY(LT ,_1 , _3))
# 5828 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1442 "src/frontc/cparser.mly"
                                   (BINARY(GT ,_1 , _3))
# 5836 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1443 "src/frontc/cparser.mly"
                                      (BINARY(LE ,_1 , _3))
# 5844 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1444 "src/frontc/cparser.mly"
                                      (BINARY(GE ,_1 , _3))
# 5852 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1448 "src/frontc/cparser.mly"
                                        ( _1 )
# 5859 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1449 "src/frontc/cparser.mly"
                                            (BINARY(EQ ,_1 , _3))
# 5867 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1450 "src/frontc/cparser.mly"
                                            (BINARY(NE ,_1 , _3))
# 5875 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1455 "src/frontc/cparser.mly"
                                        ( _1 )
# 5882 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1456 "src/frontc/cparser.mly"
                                       (BINARY(BAND ,_1 , _3))
# 5891 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1460 "src/frontc/cparser.mly"
                                           ( _1 )
# 5898 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1461 "src/frontc/cparser.mly"
                                           (BINARY(XOR ,_1 , _3))
# 5906 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1465 "src/frontc/cparser.mly"
                                          ( _1 )
# 5913 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1466 "src/frontc/cparser.mly"
                                          (BINARY(BOR ,_1 , _3))
# 5921 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1470 "src/frontc/cparser.mly"
                                                ( _1 )
# 5928 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1471 "src/frontc/cparser.mly"
                                             (BINARY(AND ,_1 , _3))
# 5937 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1475 "src/frontc/cparser.mly"
                                               ( _1 )
# 5944 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1476 "src/frontc/cparser.mly"
                                               (BINARY(OR ,_1 , _3))
# 5952 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_attr) in
    Obj.repr(
# 1480 "src/frontc/cparser.mly"
                                           ( _1 )
# 5959 "src/frontc/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_attr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1483 "src/frontc/cparser.mly"
                                          ( QUESTION(_1, _3, _5) )
# 5968 "src/frontc/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1486 "src/frontc/cparser.mly"
                                          ( _1 )
# 5975 "src/frontc/cparser.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr) in
    Obj.repr(
# 1490 "src/frontc/cparser.mly"
                                         ( [_1] )
# 5982 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1491 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 5990 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1492 "src/frontc/cparser.mly"
                                         ( _3 )
# 5997 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    Obj.repr(
# 1495 "src/frontc/cparser.mly"
                                         ( [] )
# 6003 "src/frontc/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1496 "src/frontc/cparser.mly"
                                         ( _1 )
# 6010 "src/frontc/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list_ne) in
    Obj.repr(
# 1499 "src/frontc/cparser.mly"
                                         ( _2 )
# 6018 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1500 "src/frontc/cparser.mly"
                                         ( [] )
# 6025 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list) in
    Obj.repr(
# 1503 "src/frontc/cparser.mly"
                                         ( _2 )
# 6033 "src/frontc/cparser.ml"
               : 'paren_attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1504 "src/frontc/cparser.mly"
                                         ( [] )
# 6040 "src/frontc/cparser.ml"
               : 'paren_attr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1508 "src/frontc/cparser.mly"
                                        ( [] )
# 6046 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1509 "src/frontc/cparser.mly"
                                        ( ("volatile", []) :: _2 )
# 6054 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1510 "src/frontc/cparser.mly"
                                        ( ("const", []) :: _2 )
# 6062 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1513 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 6069 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'one_string_constant) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmtemplate) in
    Obj.repr(
# 1514 "src/frontc/cparser.mly"
                                                 ( _1 :: _2 )
# 6077 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    Obj.repr(
# 1517 "src/frontc/cparser.mly"
                        ( None )
# 6083 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asminputs) in
    Obj.repr(
# 1519 "src/frontc/cparser.mly"
                        ( let (ins, clobs) = _3 in
                          Some {aoutputs = _2; ainputs = ins; aclobbers = clobs} )
# 6092 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1523 "src/frontc/cparser.mly"
                                        ( [] )
# 6098 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperandsne) in
    Obj.repr(
# 1524 "src/frontc/cparser.mly"
                                        ( List.rev _1 )
# 6105 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1527 "src/frontc/cparser.mly"
                                        ( [_1] )
# 6112 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'asmoperandsne) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1528 "src/frontc/cparser.mly"
                                        ( _3 :: _1 )
# 6120 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'asmopname) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1531 "src/frontc/cparser.mly"
                                                           ( (_1, fst _2, fst _4) )
# 6130 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'asmopname) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1532 "src/frontc/cparser.mly"
                                                           ( (_1, fst _2, NOTHING ) )
# 6139 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    Obj.repr(
# 1535 "src/frontc/cparser.mly"
                             ( ([], []) )
# 6145 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmclobber) in
    Obj.repr(
# 1537 "src/frontc/cparser.mly"
                        ( (_2, _3) )
# 6153 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1540 "src/frontc/cparser.mly"
                                        ( None )
# 6159 "src/frontc/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 1541 "src/frontc/cparser.mly"
                                        ( Some (fst _2) )
# 6166 "src/frontc/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    Obj.repr(
# 1545 "src/frontc/cparser.mly"
                                        ( [] )
# 6172 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst_ne) in
    Obj.repr(
# 1546 "src/frontc/cparser.mly"
                                        ( _2 )
# 6179 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1549 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 6186 "src/frontc/cparser.ml"
               : 'asmcloberlst_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'one_string_constant) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst_ne) in
    Obj.repr(
# 1550 "src/frontc/cparser.mly"
                                                 ( _1 :: _3 )
# 6194 "src/frontc/cparser.ml"
               : 'asmcloberlst_ne))
(* Entry interpret *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let interpret (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Cabs.definition list)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Cabs.definition list)
;;
# 1554 "src/frontc/cparser.mly"



# 6227 "src/frontc/cparser.ml"
